<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:importer="clr-namespace:ClrVpin.Importer"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:controls="clr-namespace:ClrVpin.Controls"
                    xmlns:converters="clr-namespace:ClrVpin.Converters"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:vps="clr-namespace:ClrVpin.Models.Importer.Vps"
                    xmlns:shared="clr-namespace:ClrVpin.Models.Shared"
                    xmlns:importerModel="clr-namespace:ClrVpin.Models.Importer">

  <ResourceDictionary.MergedDictionaries>
    <controls:SharedResourceDictionary Source="\Controls\Styles.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\DataTemplates.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\ControlTemplates.xaml" />
    <controls:SharedResourceDictionary Source="DatabaseItem.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\Converters.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\Constants.xaml" />
    <controls:SharedResourceDictionary Source="\Shared\Notification.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="UrlButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignFloatingActionSecondaryDarkButton}">
    <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
  </Style>

  <Style x:Key="IsNewUrlButtonStyle" TargetType="Button" BasedOn="{StaticResource UrlButtonStyle}">
    <Setter Property="Background" Value="{StaticResource WarningBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource WarningBrush}" />
  </Style>

  <Style x:Key="ButtonIconStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignIconButton}">
    <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
  </Style>

  <Style x:Key="HighlightedButtonIconStyle" TargetType="Button" BasedOn="{StaticResource ButtonIconStyle}">
    <Setter Property="Foreground" Value="{StaticResource WarningBrush}" />
  </Style>

  <Style x:Key="EmphasisButtonIconStyle" TargetType="Button" BasedOn="{StaticResource ButtonIconStyle}">
    <Setter Property="Foreground" Value="{DynamicResource SecondaryHueDarkBrush}" />
  </Style>

  <converters:BoolToStringConverter x:Key="TabItemToColorConverter" True="Coral" False="#89FFFFFF" /> <!--{DynamicResource MaterialDesignBodyLight}-->
  <converters:BoolToStyleConverter x:Key="IsNewUrlButtonStyleConverter" True="{StaticResource IsNewUrlButtonStyle}" False="{StaticResource UrlButtonStyle}" />

  <Style x:Key="HeaderStyle" TargetType="DataGridColumnHeader" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
    <Setter Property="FontSize" Value="12" />
  </Style>

  <DataTemplate x:Key="UrlDetailTemplate" DataType="vps:UrlDetail">
    <!--<Button Style="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ContentControl}}, Path=DataContext.IsNew, Converter={StaticResource IsNewUrlButtonStyleConverter}}"-->
    <Button Style="{Binding IsNew, Converter={StaticResource IsNewUrlButtonStyleConverter}}" ToolTip="{Binding Url}" Command="{Binding SelectedCommand}">
      <materialDesign:PackIcon Kind="{Binding Broken, Converter={StaticResource UrlToIconConverter}}" Height="40" Width="40" Foreground="{DynamicResource MaterialDesignBody}" />
    </Button>
  </DataTemplate>

  <!-- urls.. drawn with negative top margin so they appear in the same visual 'row' as the image -->
  <DataTemplate x:Key="UrlsTemplate">
    <ListBox DockPanel.Dock="Right" ItemsSource="{Binding}" ItemTemplate="{StaticResource UrlDetailTemplate}" Margin="0,-40,0,0"
             materialDesign:ListBoxItemAssist.ShowSelection="False"
             Style="{StaticResource RightAlignedHorizontalListBoxStyle}">
      <ListBox.ItemContainerStyle>
        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource HighlightedListBoxItemEffectStyle}" d:DataContext="{d:DesignInstance vps:UrlDetail}">
          <Setter Property="IsEnabled" Value="{Binding Broken, Converter={StaticResource InvertBooleanConverter}}" />
        </Style>
      </ListBox.ItemContainerStyle>
    </ListBox>
  </DataTemplate>

  <!--an insane attempt to use a control template..
      - failed because Command won't fire (for some reason) on the behaviour
      - kept here commented out as a reminder for future me not to try this again!
          <ContentControl Template="{StaticResource ImageTemplate}"
                        controls:GenericAttached.String="{Binding ImgUrl}" controls:GenericAttached.Command="{Binding ImageSelectedCommand}" />
  -->
  <!-- if valid url then show progress and ultimate image, else show broken image
       - written as a control template (vs a DataTemplate with string binding so that it's usable by top level Game and also ImageFile --><!--
  <ControlTemplate x:Key="ImageTemplate" TargetType="ContentControl">
    <Grid Height="300" ToolTip="{TemplateBinding controls:GenericAttached.String}">
      <materialDesign:PackIcon Kind="ImageOffOutline" Width="200" Height="200" HorizontalAlignment="Center" VerticalAlignment="Center"
                               Visibility="{TemplateBinding controls:GenericAttached.String, Converter={StaticResource NullToVisibilityConverter}}" />
      <Grid Visibility="{TemplateBinding controls:GenericAttached.String, Converter={StaticResource ReverseNullToVisibilityConverter}}">

        <ProgressBar Height="50" Width="50" Style="{StaticResource MaterialDesignCircularProgressBar}" Foreground="{DynamicResource MaterialDesignBody}" Value="0" IsIndeterminate="True" />
         --><!-- converter required because template binding doesn't convert to Uri automatically.. second class binding!! 
              - refer https://stackoverflow.com/questions/1935919/wpf-custom-control-templatebinding-to-image--><!-- 
        <Image Source="{TemplateBinding controls:GenericAttached.String, Converter={StaticResource ImageSourceConverter}}" Stretch="UniformToFill" Cursor="Hand">
          <b:Interaction.Triggers>
            <b:EventTrigger EventName="MouseUp">
              <b:InvokeCommandAction Command="{TemplateBinding controls:GenericAttached.Command}" />
            </b:EventTrigger>
          </b:Interaction.Triggers>
        </Image>
      </Grid>
    </Grid>
  </ControlTemplate>-->

  <DataTemplate x:Key="ImageTemplate" DataType="vps:UrlSelection">
    <Grid Height="300">
      <materialDesign:PackIcon Kind="ImageOffOutline" Width="200" Height="200" HorizontalAlignment="Center" VerticalAlignment="Center"
                               Visibility="{Binding Url, Converter={StaticResource NullToVisibilityConverter}}" />
      <Grid Visibility="{Binding Url, Converter={StaticResource ReverseNullToVisibilityConverter}}">

        <ProgressBar Height="50" Width="50" Style="{StaticResource MaterialDesignCircularProgressBar}" Foreground="{DynamicResource MaterialDesignBody}" Value="0" IsIndeterminate="True" />
        <!-- converter required because template binding doesn't convert to Uri automatically.. second class binding!! 
              - refer https://stackoverflow.com/questions/1935919/wpf-custom-control-templatebinding-to-image-->
        <Image Source="{Binding Url}" Stretch="UniformToFill" Cursor="Hand">
          <b:Interaction.Triggers>
            <b:EventTrigger EventName="MouseUp">
              <b:InvokeCommandAction Command="{Binding SelectedCommand}" />
            </b:EventTrigger>
          </b:Interaction.Triggers>
        </Image>
      </Grid>
    </Grid>
  </DataTemplate>

  <!--each of the x3 types (TableFile, ImageFile and File) are subtly different enough to warrant separate templates-->
  <DataTemplate DataType="{x:Type vps:TableFile}">
    <materialDesign:Card Margin="0" Width="500" UniformCornerRadius="6" ClipContent="True">
      <StackPanel>
        <!--<Button Command="{Binding ImageSelectedCommand}" Background="Transparent">-->
        <ContentControl Content="{Binding ImageUrlSelection}" ContentTemplate="{StaticResource ImageTemplate}" />
        <ContentControl Content="{Binding Urls}" ContentTemplate="{StaticResource UrlsTemplate}" />

        <StackPanel Margin="5,0,0,0">
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Version" controls:GenericAttached.String2="{Binding Version}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Comment" controls:GenericAttached.String2="{Binding Comment}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Features"
                          controls:GenericAttached.String2="{Binding Features, Converter={StaticResource ListToStringConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding Name}"
                          Visibility="{Binding Name, Converter={StaticResource NullableToVisibilityConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Authors" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Format" controls:GenericAttached.String2="{Binding TableFormat}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Themes"
                          controls:GenericAttached.String2="{Binding Themes, Converter={StaticResource ListToStringConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding CreatedAt}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding UpdatedAt}" />
        </StackPanel>
      </StackPanel>
    </materialDesign:Card>
  </DataTemplate>

  <DataTemplate DataType="{x:Type vps:ImageFile}">
    <materialDesign:Card Margin="0" Width="500" UniformCornerRadius="6" ClipContent="True">
      <StackPanel>
        <ContentControl Content="{Binding ImageUrlSelection}" ContentTemplate="{StaticResource ImageTemplate}" />
        <ContentControl Content="{Binding Urls}" ContentTemplate="{StaticResource UrlsTemplate}" />

        <StackPanel Margin="5,0,0,0">
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Version" controls:GenericAttached.String2="{Binding Version}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Features"
                          controls:GenericAttached.String2="{Binding Features, Converter={StaticResource ListToStringConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding Name}"
                          Visibility="{Binding Name, Converter={StaticResource NullableToVisibilityConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Authors" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding CreatedAt}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding UpdatedAt}" />
        </StackPanel>
      </StackPanel>
    </materialDesign:Card>
  </DataTemplate>

  <DataTemplate DataType="{x:Type vps:File}">
    <materialDesign:Card Margin="0" Width="500" UniformCornerRadius="6" ClipContent="True">
      <StackPanel>
        <Grid Height="300">
          <materialDesign:PackIcon Kind="GhostOutline" Width="200" Height="200" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </Grid>
        <ContentControl Content="{Binding Urls}" ContentTemplate="{StaticResource UrlsTemplate}" />

        <StackPanel Margin="5,0,0,0">
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Version" controls:GenericAttached.String2="{Binding Version}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding Name}"
                          Visibility="{Binding Name, Converter={StaticResource NullableToVisibilityConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Authors" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding CreatedAt}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding UpdatedAt}" />
        </StackPanel>
      </StackPanel>
    </materialDesign:Card>
  </DataTemplate>

  <DataTemplate x:Key="FilesTemplate">
    <controls:HorizontalWheelScrollViewer>
      <!--item template is deliberately not specified so that the correct DataTemplate is automatically selected at run time-->
      <ListBox ItemsSource="{Binding}" materialDesign:ListBoxItemAssist.ShowSelection="False" VerticalContentAlignment="Top"
               ItemContainerStyle="{StaticResource HighlightedListBoxItemOpacityStyle}" Style="{StaticResource HorizontalListBoxStyle}" />
    </controls:HorizontalWheelScrollViewer>
  </DataTemplate>

  <Style x:Key="ComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}">
    <Setter Property="IsDropDownOpen" Value="{Binding Path=IsKeyboardFocusWithin, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
    <Setter Property="materialDesign:HintAssist.HintOpacity" Value=".5" />
    <Setter Property="IsEditable" Value="False" />
    <Setter Property="IsTextSearchEnabled" Value="False" />
    <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="EditComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource ComboBoxStyle}">
    <Setter Property="IsEditable" Value="True" />
  </Style>

  <DataTemplate x:Key="ImporterResultsTemplate" DataType="{x:Type importer:ImporterResultsViewModel}">
    <materialDesign:DialogHost Identifier="ImporterResultsDialog" CloseOnClickAway="True" VerticalAlignment="Stretch" DialogMargin="0" DialogBackground="Transparent">
      <!--example of different dialogs from the same host.. https://github.com/Keboo/MaterialDesignInXaml.Examples/blob/master/DialogHost/DialogHost.FromViewModel/MainWindow.xaml-->
      <materialDesign:DialogHost.DialogContentTemplate>
        <DataTemplate>
          <DataTemplate.Resources>

            <!--image dialog-->
            <DataTemplate DataType="{x:Type vps:UrlSelection}">
              <StackPanel>
                <b:Interaction.Triggers>
                  <b:EventTrigger EventName="MouseUp">
                    <b:InvokeCommandAction Command="{Binding SelectedCommand}" />
                  </b:EventTrigger>
                </b:Interaction.Triggers>

                <Image Margin="15" Source="{Binding Url}" Stretch="Uniform">
                  <Image.Effect>
                    <DropShadowEffect ShadowDepth="0" Color="White" BlurRadius="15" RenderingBias="Performance" />
                  </Image.Effect>
                </Image>
                <!--non-visible button marked with IsCancel to support the escape key-->
                <Button Content="Cancel" Width="0" Height="0" IsCancel="True" Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}" />
              </StackPanel>
            </DataTemplate>

            <!-- notification and database item (game) templates imported at global file scope - refer (top of file) -->

          </DataTemplate.Resources>

          <!--render the appropriate template-->
          <ContentControl Content="{Binding}" />
        </DataTemplate>
      </materialDesign:DialogHost.DialogContentTemplate>


      <!-- dock panel to provide a scrollbar (if required) for the child controls -->
      <DockPanel Margin="5" VerticalAlignment="Stretch">
        <DockPanel DockPanel.Dock="Left" Width="700">
          <GroupBox DockPanel.Dock="Top" Header="Criteria" Margin="0,0,0,10">
            <StackPanel Margin="5">
              <WrapPanel Margin="0,-10,0,0"> <!-- margin kludge required here because the combo boxes have an excessive margin to cater for the helper text :( -->
                <ComboBox ItemsSource="{Binding TablesFilterView}"
                          Text="{Binding Path=TableFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Table"
                          Style="{StaticResource EditComboBoxStyle}"
                          Width="370" Margin="0,0,5,0">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="TextBoxBase.TextChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <ComboBox ItemsSource="{Binding ManufacturersFilterView}"
                          Text="{Binding Path=ManufacturerFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Manufacturer"
                          Style="{StaticResource EditComboBoxStyle}"
                          Width="300" Margin="0">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="TextBoxBase.TextChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>
              </WrapPanel>

              <WrapPanel>
                <WrapPanel.Resources>
                  <Style x:Key="DatePickerStyle" TargetType="DatePicker" BasedOn="{StaticResource MaterialDesignFloatingHintDatePicker}">
                    <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
                    <Setter Property="Margin" Value="10,0,0,0" />
                    <Setter Property="Width" Value="125" />
                  </Style>
                </WrapPanel.Resources>

                <ComboBox ItemsSource="{Binding TypesFilterView}"
                          SelectedItem="{Binding Path=TypeFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Type"
                          Style="{StaticResource ComboBoxStyle}"
                          Width="65" Margin="0,0,0,0">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <ComboBox ItemsSource="{Binding YearsBeginFilterView}"
                          SelectedItem="{Binding Path=YearBeginFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Year From"
                          Style="{StaticResource ComboBoxStyle}"
                          Width="100" Margin="10,0,0,0">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <ComboBox ItemsSource="{Binding YearsEndFilterView}"
                          SelectedItem="{Binding Path=YearEndFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Year To"
                          Style="{StaticResource ComboBoxStyle}"
                          Width="90" Margin="10,0,0,0">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <DatePicker materialDesign:HintAssist.Hint="Updated From" Style="{StaticResource DatePickerStyle}" SelectedDate="{Binding Settings.UpdatedAtDateBegin}"
                            DisplayDateEnd="{Binding Settings.UpdatedAtDateEnd}">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="DatePicker.SelectedDateChanged">
                      <b:InvokeCommandAction Command="{Binding UpdatedFilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </DatePicker>

                <DatePicker materialDesign:HintAssist.Hint="Updated To" Style="{StaticResource DatePickerStyle}" SelectedDate="{Binding Settings.UpdatedAtDateEnd}"
                            DisplayDateStart="{Binding Settings.UpdatedAtDateBegin}">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="DatePicker.SelectedDateChanged">
                      <b:InvokeCommandAction Command="{Binding UpdatedFilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </DatePicker>
              </WrapPanel>

              <WrapPanel Margin="0,10,0,0">
                <WrapPanel>
                  <ItemsControl ItemsSource="{Binding TableStyleOptionsView}">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <WrapPanel />
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                      <DataTemplate DataType="shared:FeatureType">
                        <ContentControl Content="{Binding}" ContentTemplate="{StaticResource FeatureTypeRadioButtonTemplate}" />
                      </DataTemplate>
                    </ItemsControl.ItemTemplate>
                  </ItemsControl>
                </WrapPanel>

                <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" BorderBrush="#848484" BorderThickness="2,0,0,0" Margin="7,5" />

                <WrapPanel>
                  <ItemsControl ItemsSource="{Binding TableMatchOptionsView}">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <WrapPanel />
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                      <DataTemplate DataType="shared:FeatureType">
                        <ContentControl Content="{Binding}" ContentTemplate="{StaticResource FeatureTypeRadioButtonTemplate}" />
                      </DataTemplate>
                    </ItemsControl.ItemTemplate>
                  </ItemsControl>

                  <ContentControl Content="{Binding HideUnavailableTables}" ContentTemplate="{StaticResource FeatureTypeCheckBoxTemplate}" />
                </WrapPanel>
              </WrapPanel>
            </StackPanel>
          </GroupBox>

          <GroupBox DockPanel.Dock="Top" Header="Fix" Margin="0,0,0,10">
            <StackPanel Margin="5,0">
              <WrapPanel Margin="0,5,0,0">
                <ContentControl Template="{StaticResource KeyValuePair}"
                                controls:GenericAttached.String="All Tables"
                                controls:GenericAttached.Double="100"
                                controls:GenericAttached.Double2="14">
                  <WrapPanel>
                    <Button ToolTip="{Binding AddMissingDatabaseInfoTip}"
                            ToolTipService.ShowOnDisabled="True"
                            Style="{StaticResource RaisedWarningButtonStyle}"
                            Margin="0,0,5,0"
                            Width="150" Height="30"
                            IsEnabled="{Binding IsMatchingEnabled}"
                            Command="{Binding AllTableAddMissingDatabaseInfoCommand}">
                      Add Missing Info
                    </Button>
                    <Button ToolTip="{Binding OverwriteDatabaseInfoTip}"
                            ToolTipService.ShowOnDisabled="True"
                            Style="{StaticResource RaisedHighlightButtonStyle}"
                            Width="150" Height="30"
                            Margin="10,0,0,0"
                            IsEnabled="{Binding IsMatchingEnabled}"
                            Command="{Binding AllTableOverwriteDatabaseInfoCommand}">
                      Overwrite All Info
                    </Button>
                  </WrapPanel>
                </ContentControl>
              </WrapPanel>

              <ContentControl Template="{StaticResource KeyValuePair}"
                              controls:GenericAttached.String="Backup Folder"
                              controls:GenericAttached.Double="100"
                              controls:GenericAttached.Double2="14">
                <Hyperlink NavigateUri="{Binding BackupFolder}" Command="{Binding NavigateToBackupFolderCommand}" FontSize="16">
                  <TextBlock Text="{Binding BackupFolder}" />
                </Hyperlink>
              </ContentControl>
            </StackPanel>
          </GroupBox>

          <WrapPanel DockPanel.Dock="Top" HorizontalAlignment="Right" TextBlock.FontStyle="Italic" Opacity="0.6">
            <TextBlock Text="{Binding GameItemsView.Count}" />
            <TextBlock Text=" / " />
            <TextBlock Text="{Binding GameItems.Count}" />
          </WrapPanel>

          <DataGrid Name="ImporterResults" DockPanel.Dock="Bottom" ItemsSource="{Binding GameItemsView}" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False"
                    SelectionMode="Single"
                    materialDesign:DataGridAssist.ColumnHeaderPadding="4 1 1 4"
                    materialDesign:DataGridAssist.CellPadding="4 1 1 4"
                    CellStyle="{StaticResource NoBorderDataGridCellStyle}"
                    ColumnHeaderStyle="{StaticResource HeaderStyle}" CanUserSortColumns="True" IsReadOnly="True"
                    SelectedItem="{Binding SelectedGameItem}">

            <b:Interaction.Triggers>
              <b:EventTrigger EventName="SelectionChanged">
                <b:InvokeCommandAction Command="{Binding GameItemSelectedCommand}" />
              </b:EventTrigger>
            </b:Interaction.Triggers>

            <DataGrid.Columns>
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=importerModel:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}"
                                  Header="#" Binding="{Binding Index}" Width="45" />

              <DataGridTemplateColumn d:DataContext="{d:DesignInstance Type=importerModel:GameItem}" Header="Fix" Width="30" SortMemberPath="OnlineGame.IsMatched">
                <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                    <WrapPanel Margin="-7,-2,0,0">
                      <Button Style="{StaticResource ButtonIconStyle}" Height="30" Width="30"
                              ToolTip="{Binding UpdateDatabaseMatchedEntryTooltip}"
                              Visibility="{Binding TableMatchType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static importerModel:TableMatchOptionEnum.LocalAndOnline}}"
                              IsEnabled="{Binding IsMatchingEnabled}"
                              Command="{Binding UpdateDatabaseEntryCommand}">
                        <materialDesign:PackIcon Kind="AutoRenew" Width="33" Height="33" />
                      </Button>
                      <Button Style="{StaticResource HighlightedButtonIconStyle}" Height="30" Width="30"
                              ToolTip="{Binding UpdateDatabaseUnmatchedEntryTooltip}"
                              Visibility="{Binding TableMatchType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static importerModel:TableMatchOptionEnum.LocalOnly}}"
                              IsEnabled="{Binding IsMatchingEnabled}"
                              Command="{Binding UpdateDatabaseEntryCommand}">
                        <materialDesign:PackIcon Kind="AutoRenew" Width="33" Height="33" />
                      </Button>
                      <Button Style="{StaticResource HighlightedButtonIconStyle}" Height="30" Width="30"
                              ToolTip="{Binding CreateDatabaseEntryTooltip}"
                              Visibility="{Binding TableMatchType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static importerModel:TableMatchOptionEnum.OnlineOnly}}"
                              IsEnabled="{Binding IsMatchingEnabled}"
                              Command="{Binding CreateDatabaseEntryCommand}">
                        <materialDesign:PackIcon Kind="Plus" Width="33" Height="33" />
                      </Button>
                    </WrapPanel>
                  </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
              </DataGridTemplateColumn>

              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=importerModel:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}" Header="Table"
                                  Binding="{Binding Name}"
                                  Width="255" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=importerModel:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}" Header="Manufacturer"
                                  Binding="{Binding Manufacturer}" Width="160" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=importerModel:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}" Header="Year"
                                  Binding="{Binding Year}"
                                  Width="55" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=importerModel:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}" Header="Updated"
                                  Binding="{Binding UpdatedAt, StringFormat={}{0:dd/MM/yy hh:mm}}" />
            </DataGrid.Columns>
          </DataGrid>
        </DockPanel>

        <DockPanel DockPanel.Dock="Right" Margin="10,0,0,0">
          <Grid>
            <StackPanel Visibility="{Binding ElementName=ImporterResults, Path=SelectedIndex, Converter={StaticResource PositiveToVisibilityConverter}}"
                        VerticalAlignment="Center" HorizontalAlignment="Center">
              <materialDesign:PackIcon Kind="HelpCircleOutline" Width="400" Height="400" HorizontalAlignment="Center" />
              <TextBlock Text="Select a table from the left hand side" FontSize="24" />
            </StackPanel>

            <StackPanel Visibility="{Binding ElementName=ImporterResults, Path=SelectedIndex, Converter={StaticResource NegativeToVisibilityConverter}}">
              <UniformGrid Columns="3">
                <GroupBox Header="Hardware: Table Info">
                  <StackPanel Margin="5,0">
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Name}" />
                    <UniformGrid Columns="2">
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Manufacturer"
                                      controls:GenericAttached.String2="{Binding SelectedOnlineGame.Manufacturer}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Year" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Year}" />
                    </UniformGrid>
                    <UniformGrid Columns="2">
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Type" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Type}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Players" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Players}" />
                    </UniformGrid>
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="MPU" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Mpu}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Themes"
                                    controls:GenericAttached.String2="{Binding SelectedOnlineGame.Themes, Converter={StaticResource ListToStringConverter}}" />
                    <ContentControl Template="{StaticResource KeyValuePair}" controls:GenericAttached.String="IPDB">
                      <Hyperlink Command="{Binding NavigateToIpdbCommand}" CommandParameter="{Binding SelectedOnlineGame.IpdbUrl}">
                        <TextBlock Text="{Binding SelectedOnlineGame.IpdbUrl}" Style="{StaticResource ValueTextBlockStyle}" />
                      </Hyperlink>
                    </ContentControl>
                  </StackPanel>
                </GroupBox>

                <ContentControl Content="{Binding SelectedOnlineGame.ImageUrlSelection}" ContentTemplate="{StaticResource ImageTemplate}" Margin="5,0" />

                <GroupBox Header="Software: Virtualized Info">
                  <StackPanel Margin="5,0">
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding SelectedOnlineGame.UpdatedAt}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Features"
                                    controls:GenericAttached.String2="{Binding SelectedOnlineGame.Features, Converter={StaticResource ListToStringConverter}}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Designers"
                                    controls:GenericAttached.String2="{Binding SelectedOnlineGame.Designers, Converter={StaticResource ListToStringConverter}}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created"
                                    controls:GenericAttached.String2="{Binding SelectedOnlineGame.LastCreatedAt}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding SelectedOnlineGame.UpdatedAt}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Broken" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Broken}" />
                  </StackPanel>
                </GroupBox>
              </UniformGrid>

              <GroupBox Margin="0,10,0,0" Header="Files">
                <GroupBox.Resources>
                  <Style x:Key="TabControlStyle" TargetType="TabControl" BasedOn="{StaticResource MaterialDesignTabControl}"/>
                </GroupBox.Resources>

                <TabControl Style="{StaticResource TabControlStyle}" ItemsSource="{Binding SelectedOnlineGame.AllFilesList}" SelectedItem="{Binding SelectedFileCollection}">
                  <TabControl.ItemTemplate>
                    <!--tab item header content-->
                    <DataTemplate DataType="{x:Type vps:FileCollection}">
                      <WrapPanel>
                        <TextBlock FontSize="18" FontWeight="Bold" VerticalAlignment="Center" Text="{Binding Title}"
                                   Foreground="{Binding IsNew, Converter={StaticResource TabItemToColorConverter}}" />
                        <materialDesign:PackIcon Kind="NewBox" Height="32" Width="32" Margin="1,-16,0,0" Foreground="{StaticResource WarningBrush}"
                                                 Visibility="{Binding IsNew, Converter={StaticResource ReverseBoolToHiddenConverter}}" />
                      </WrapPanel>
                    </DataTemplate>
                  </TabControl.ItemTemplate>

                  <TabControl.ContentTemplate>
                    <DataTemplate>
                      <!-- selected tab item contents (underneath) -->
                      <ContentControl Content="{Binding}" ContentTemplate="{StaticResource FilesTemplate}" />
                    </DataTemplate>
                  </TabControl.ContentTemplate>

                  <TabControl.ItemContainerStyle>
                    <!-- tab item header style, e.g. padding, disabled, etc -->
                    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource MaterialDesignTabItem}" d:DataContext="{d:DesignInstance vps:FileCollection}">
                      <Setter Property="IsEnabled" Value="{Binding Count}" />
                      <Setter Property="Padding" Value="6,12" />
                    </Style>
                  </TabControl.ItemContainerStyle>
                </TabControl>
              </GroupBox>
            </StackPanel>
          </Grid>
        </DockPanel>
      </DockPanel>
    </materialDesign:DialogHost>
  </DataTemplate>
</ResourceDictionary>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:importer="clr-namespace:ClrVpin.Importer"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:controls="clr-namespace:ClrVpin.Controls"
                    xmlns:converters="clr-namespace:ClrVpin.Converters"
                    xmlns:vps="clr-namespace:ClrVpin.Importer.Vps"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:mde="https://spiegelp.github.io/MaterialDesignExtensions/winfx/xaml">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="\Controls\Styles.xaml" />
    <ResourceDictionary Source="\Controls\Templates.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="UrlButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignFloatingActionSecondaryDarkButton}">
    <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
  </Style>

  <Style x:Key="IsNewUrlButtonStyle" TargetType="Button" BasedOn="{StaticResource UrlButtonStyle}">
    <Setter Property="Background" Value="Coral" />
    <Setter Property="BorderBrush" Value="Coral" />
  </Style>

  <converters:ListToStringConverter x:Key="ListToStringConverter" />
  <converters:BoolToStringConverter x:Key="UrlToIconConverter" True="WebCancel" False="WebSync" />
  <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" True="Visible" False="Collapsed" />
  <converters:NullToVisibilityConverter x:Key="ReverseNullToVisibilityConverter" True="Collapsed" False="Visible" />
  <converters:NegativeToVisibilityConverter x:Key="NegativeToVisibilityConverter" />
  <converters:NegativeToVisibilityConverter x:Key="PositiveToVisibilityConverter" True="Visible" False="Collapsed" />
  <converters:BoolToStringConverter x:Key="TabItemToColorConverter" True="Coral" False="#89FFFFFF" /> <!--{DynamicResource MaterialDesignBodyLight}-->
  <converters:BoolToStyleConverter x:Key="IsNewUrlButtonStyleConverter" True="{StaticResource IsNewUrlButtonStyle}" False="{StaticResource UrlButtonStyle}" />

  <Style x:Key="HeaderStyle" TargetType="DataGridColumnHeader" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}" />

  <DataTemplate x:Key="UrlDetailTemplate" DataType="vps:UrlDetail">
    <!--<Button Style="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ContentControl}}, Path=DataContext.IsNew, Converter={StaticResource IsNewUrlButtonStyleConverter}}"-->
    <Button Style="{Binding IsNew, Converter={StaticResource IsNewUrlButtonStyleConverter}}" ToolTip="{Binding Url}" Command="{Binding SelectedCommand}">
      <materialDesign:PackIcon Kind="{Binding Broken, Converter={StaticResource UrlToIconConverter}}" Height="40" Width="40" Foreground="{DynamicResource MaterialDesignBody}" />
    </Button>
  </DataTemplate>

  <!-- urls.. drawn with negative top margin so they appear in the same visual 'row' as the image -->
  <DataTemplate x:Key="UrlsTemplate">
    <ListBox DockPanel.Dock="Right" ItemsSource="{Binding}" ItemTemplate="{StaticResource UrlDetailTemplate}" Margin="0,-40,0,0"
             materialDesign:ListBoxItemAssist.ShowSelection="False"
             Style="{StaticResource RightAlignedHorizontalListBoxStyle}">
      <ListBox.ItemContainerStyle>
        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource HighlightedListBoxItemEffectStyle}" d:DataContext="{d:DesignInstance vps:UrlDetail}">
          <Setter Property="IsEnabled" Value="{Binding Broken, Converter={StaticResource InvertBooleanConverter}}" />
        </Style>
      </ListBox.ItemContainerStyle>
    </ListBox>
  </DataTemplate>

  <!--an insane attempt to use a control template..
      - failed because Command won't fire (for some reason) on the behaviour
      - kept here commented out as a reminder for future me not to try this again!
          <ContentControl Template="{StaticResource ImageTemplate}"
                        controls:GenericAttached.String="{Binding ImgUrl}" controls:GenericAttached.Command="{Binding ImageSelectedCommand}" />
  -->
  <!-- if valid url then show progress and ultimate image, else show broken image
       - written as a control template (vs a DataTemplate with string binding so that it's usable by top level Game and also ImageFile --><!--
  <ControlTemplate x:Key="ImageTemplate" TargetType="ContentControl">
    <Grid Height="300" ToolTip="{TemplateBinding controls:GenericAttached.String}">
      <materialDesign:PackIcon Kind="ImageOffOutline" Width="200" Height="200" HorizontalAlignment="Center" VerticalAlignment="Center"
                               Visibility="{TemplateBinding controls:GenericAttached.String, Converter={StaticResource NullToVisibilityConverter}}" />
      <Grid Visibility="{TemplateBinding controls:GenericAttached.String, Converter={StaticResource ReverseNullToVisibilityConverter}}">

        <ProgressBar Height="50" Width="50" Style="{StaticResource MaterialDesignCircularProgressBar}" Foreground="{DynamicResource MaterialDesignBody}" Value="0" IsIndeterminate="True" />
         --><!-- converter required because template binding doesn't convert to Uri automatically.. second class binding!! 
              - refer https://stackoverflow.com/questions/1935919/wpf-custom-control-templatebinding-to-image--><!-- 
        <Image Source="{TemplateBinding controls:GenericAttached.String, Converter={StaticResource ImageSourceConverter}}" Stretch="UniformToFill" Cursor="Hand">
          <b:Interaction.Triggers>
            <b:EventTrigger EventName="MouseUp">
              <b:InvokeCommandAction Command="{TemplateBinding controls:GenericAttached.Command}" />
            </b:EventTrigger>
          </b:Interaction.Triggers>
        </Image>
      </Grid>
    </Grid>
  </ControlTemplate>-->

  <DataTemplate x:Key="ImageTemplate" DataType="vps:UrlSelection">
    <Grid Height="300">
      <materialDesign:PackIcon Kind="ImageOffOutline" Width="200" Height="200" HorizontalAlignment="Center" VerticalAlignment="Center"
                               Visibility="{Binding Url, Converter={StaticResource NullToVisibilityConverter}}" />
      <Grid Visibility="{Binding Url, Converter={StaticResource ReverseNullToVisibilityConverter}}">

        <ProgressBar Height="50" Width="50" Style="{StaticResource MaterialDesignCircularProgressBar}" Foreground="{DynamicResource MaterialDesignBody}" Value="0" IsIndeterminate="True" />
        <!-- converter required because template binding doesn't convert to Uri automatically.. second class binding!! 
              - refer https://stackoverflow.com/questions/1935919/wpf-custom-control-templatebinding-to-image-->
        <Image Source="{Binding Url}" Stretch="UniformToFill" Cursor="Hand">
          <b:Interaction.Triggers>
            <b:EventTrigger EventName="MouseUp">
              <b:InvokeCommandAction Command="{Binding SelectedCommand}" />
            </b:EventTrigger>
          </b:Interaction.Triggers>
        </Image>
      </Grid>
    </Grid>
  </DataTemplate>

  <!--each of the x3 types (TableFile, ImageFile and File) are subtly different enough to warrant separate templates-->
  <DataTemplate DataType="{x:Type vps:TableFile}">
    <materialDesign:Card Margin="5,0,0,0" Width="500" UniformCornerRadius="6" ClipContent="True">
      <StackPanel>
        <!--<Button Command="{Binding ImageSelectedCommand}" Background="Transparent">-->
        <ContentControl Content="{Binding ImageUrlSelection}" ContentTemplate="{StaticResource ImageTemplate}" />

        <ContentControl Content="{Binding Urls}" ContentTemplate="{StaticResource UrlsTemplate}" />

        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Version" controls:GenericAttached.String2="{Binding Version}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Comment" controls:GenericAttached.String2="{Binding Comment}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Features"
                        controls:GenericAttached.String2="{Binding Features, Converter={StaticResource ListToStringConverter}}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding Name}"
                        Visibility="{Binding Name, Converter={StaticResource NullableToVisibilityConverter}}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Authors" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Format" controls:GenericAttached.String2="{Binding TableFormat}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Themes"
                        controls:GenericAttached.String2="{Binding Themes, Converter={StaticResource ListToStringConverter}}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding CreatedAt}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding UpdatedAt}" />
      </StackPanel>
    </materialDesign:Card>
  </DataTemplate>

  <DataTemplate DataType="{x:Type vps:ImageFile}">
    <materialDesign:Card Margin="5,0,0,0" Width="500" UniformCornerRadius="6" ClipContent="True">
      <StackPanel>
        <ContentControl Content="{Binding ImageUrlSelection}" ContentTemplate="{StaticResource ImageTemplate}" />

        <ContentControl Content="{Binding Urls}" ContentTemplate="{StaticResource UrlsTemplate}" />

        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Version" controls:GenericAttached.String2="{Binding Version}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Features"
                        controls:GenericAttached.String2="{Binding Features, Converter={StaticResource ListToStringConverter}}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding Name}"
                        Visibility="{Binding Name, Converter={StaticResource NullableToVisibilityConverter}}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Authors" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding CreatedAt}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding UpdatedAt}" />
      </StackPanel>
    </materialDesign:Card>
  </DataTemplate>

  <DataTemplate DataType="{x:Type vps:File}">
    <materialDesign:Card Margin="5,0,0,0" Width="500" UniformCornerRadius="6" ClipContent="True">
      <StackPanel>
        <Grid Height="300">
          <materialDesign:PackIcon Kind="GhostOutline" Width="200" Height="200" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </Grid>

        <ContentControl Content="{Binding Urls}" ContentTemplate="{StaticResource UrlsTemplate}" />

        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Version" controls:GenericAttached.String2="{Binding Version}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding Name}"
                        Visibility="{Binding Name, Converter={StaticResource NullableToVisibilityConverter}}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Authors" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding CreatedAt}" />
        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding UpdatedAt}" />
      </StackPanel>
    </materialDesign:Card>
  </DataTemplate>

  <DataTemplate x:Key="FilesTemplate">
    <controls:HorizontalWheelScrollViewer>
      <!--item template is deliberately not specified so that the correct DataTemplate is automatically selected at run time-->
      <ListBox ItemsSource="{Binding}" materialDesign:ListBoxItemAssist.ShowSelection="False" VerticalContentAlignment="Top"
               ItemContainerStyle="{StaticResource HighlightedListBoxItemOpacityStyle}" Style="{StaticResource HorizontalListBoxStyle}" />
    </controls:HorizontalWheelScrollViewer>
  </DataTemplate>

  <Style x:Key="ComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}">
    <Setter Property="IsDropDownOpen" Value="{Binding Path=IsKeyboardFocusWithin, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
    <Setter Property="materialDesign:HintAssist.HintOpacity" Value=".5" />
    <Setter Property="IsEditable" Value="False" />
    <Setter Property="IsTextSearchEnabled" Value="False" />
    <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="EditComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource ComboBoxStyle}">
    <Setter Property="IsEditable" Value="True" />
  </Style>

  <DataTemplate x:Key="ImporterResultsTemplate" DataType="{x:Type importer:ImporterResultsViewModel}">
    <materialDesign:DialogHost Identifier="ImageDialog" CloseOnClickAway="True" VerticalAlignment="Stretch" DialogMargin="0" DialogBackground="Transparent">
      <materialDesign:DialogHost.DialogContentTemplate>
        <DataTemplate DataType="vps:UrlSelection">
          <StackPanel>
            <Image Margin="15" Source="{Binding Url}" Stretch="Uniform">
              <Image.Effect>
                <DropShadowEffect ShadowDepth="0" Color="White" BlurRadius="15" RenderingBias="Performance" />
              </Image.Effect>
              <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseUp">
                  <b:InvokeCommandAction Command="{Binding SelectedCommand}" />
                </b:EventTrigger>
              </b:Interaction.Triggers>
            </Image>
            <!--non-visible button marked with IsCancel to support the escape key-->
            <Button Content="Cancel" Width="0" Height="0" IsCancel="True" Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}" />
          </StackPanel>
        </DataTemplate>
      </materialDesign:DialogHost.DialogContentTemplate>

      <!-- dock panel to provide a scrollbar (if required) for the child controls -->
      <DockPanel Margin="5" VerticalAlignment="Stretch">
        <DockPanel DockPanel.Dock="Left" Width="700">
          <GroupBox DockPanel.Dock="Top" Header="Criteria" Margin="0,0,0,10">
            <StackPanel Margin="5,0,0,5">
              <WrapPanel>
                <ComboBox ItemsSource="{Binding TablesFilterView}"
                          Text="{Binding Path=TableFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Table"
                          Style="{StaticResource EditComboBoxStyle}"
                          Width="370">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="TextBoxBase.TextChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <ComboBox ItemsSource="{Binding ManufacturersFilterView}"
                          Text="{Binding Path=ManufacturerFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Manufacturer"
                          Style="{StaticResource EditComboBoxStyle}"
                          Width="300" Margin="10,0,0,0">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="TextBoxBase.TextChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>
              </WrapPanel>

              <WrapPanel>
                <WrapPanel.Resources>
                  <Style x:Key="DatePickerStyle" TargetType="DatePicker" BasedOn="{StaticResource MaterialDesignFloatingHintDatePicker}">
                    <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
                    <Setter Property="Margin" Value="10,0,0,0" />
                    <Setter Property="Width" Value="125" />
                  </Style>
                </WrapPanel.Resources>

                <CheckBox Margin="0,10,0,0" Content="Include 'Original'" IsChecked="{Binding Settings.IncludeOriginalTables}" Command="{Binding FilterChanged}" />

                <ComboBox ItemsSource="{Binding TypesFilterView}"
                          SelectedItem="{Binding Path=TypeFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Type"
                          Style="{StaticResource ComboBoxStyle}"
                          Width="65" Margin="10,0,0,0">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <ComboBox ItemsSource="{Binding YearsBeginFilterView}"
                          SelectedItem="{Binding Path=YearBeginFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Year From"
                          Style="{StaticResource ComboBoxStyle}"
                          Width="100" Margin="10,0,0,0">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <ComboBox ItemsSource="{Binding YearsEndFilterView}"
                          SelectedItem="{Binding Path=YearEndFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Year To"
                          Style="{StaticResource ComboBoxStyle}"
                          Width="90" Margin="10,0,0,0">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <DatePicker materialDesign:HintAssist.Hint="Updated From" Style="{StaticResource DatePickerStyle}" SelectedDate="{Binding Settings.UpdatedAtDateBegin}"
                            DisplayDateEnd="{Binding Settings.UpdatedAtDateEnd}">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="DatePicker.SelectedDateChanged">
                      <b:InvokeCommandAction Command="{Binding UpdatedFilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </DatePicker>

                <DatePicker materialDesign:HintAssist.Hint="Updated To" Style="{StaticResource DatePickerStyle}" SelectedDate="{Binding Settings.UpdatedAtDateEnd}"
                            DisplayDateStart="{Binding Settings.UpdatedAtDateBegin}">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="DatePicker.SelectedDateChanged">
                      <b:InvokeCommandAction Command="{Binding UpdatedFilterChanged}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </DatePicker>
              </WrapPanel>
            </StackPanel>
          </GroupBox>

          <WrapPanel DockPanel.Dock="Top" HorizontalAlignment="Right" TextBlock.FontStyle="Italic" Opacity="0.6">
            <TextBlock Text="{Binding GamesView.Count}" />
            <TextBlock Text=" / " />
            <TextBlock Text="{Binding Games.Count}" />
          </WrapPanel>

          <DataGrid Name="ImporterResults" DockPanel.Dock="Bottom" ItemsSource="{Binding GamesView}" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False"
                    SelectionMode="Single"
                    materialDesign:DataGridAssist.CellPadding="15 5 5 8" materialDesign:DataGridAssist.ColumnHeaderPadding="15 5 5 8"
                    CellStyle="{StaticResource NoBorderDataGridCellStyle}"
                    ColumnHeaderStyle="{StaticResource HeaderStyle}" CanUserSortColumns="True" IsReadOnly="True"
                    SelectedItem="{Binding SelectedGame}">
            <DataGrid.Columns>
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=vps:Game}" Header="#" Binding="{Binding Index}" Width="54" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=vps:Game}" Header="Table" Binding="{Binding Name}" Width="250" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=vps:Game}" Header="Manufacturer" Binding="{Binding Manufacturer}" Width="150" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=vps:Game}" Header="Year" Binding="{Binding Year}" Width="53" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=vps:Game}" Header="Updated" Binding="{Binding UpdatedAt}" Width="165" />
            </DataGrid.Columns>
          </DataGrid>
        </DockPanel>

        <DockPanel DockPanel.Dock="Right" Margin="10,0,0,0">
          <Grid>
            <StackPanel Visibility="{Binding ElementName=ImporterResults, Path=SelectedIndex, Converter={StaticResource PositiveToVisibilityConverter}}"
                        VerticalAlignment="Center" HorizontalAlignment="Center">
              <materialDesign:PackIcon Kind="HelpCircleOutline" Width="400" Height="400" HorizontalAlignment="Center" />
              <TextBlock Text="Select a table from the left hand side" FontSize="24" />
            </StackPanel>

            <StackPanel Visibility="{Binding ElementName=ImporterResults, Path=SelectedIndex, Converter={StaticResource NegativeToVisibilityConverter}}">
              <UniformGrid Columns="3">
                <GroupBox Header="Hardware: Table Info">
                  <StackPanel>
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding SelectedGame.Name}" />
                    <UniformGrid Columns="2">
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Manufacturer"
                                      controls:GenericAttached.String2="{Binding SelectedGame.Manufacturer}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Year" controls:GenericAttached.String2="{Binding SelectedGame.Year}" />
                    </UniformGrid>
                    <UniformGrid Columns="2">
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Type" controls:GenericAttached.String2="{Binding SelectedGame.Type}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Players" controls:GenericAttached.String2="{Binding SelectedGame.Players}" />
                    </UniformGrid>
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="MPU" controls:GenericAttached.String2="{Binding SelectedGame.Mpu}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Themes"
                                    controls:GenericAttached.String2="{Binding SelectedGame.Themes, Converter={StaticResource ListToStringConverter}}" />
                    <ContentControl Template="{StaticResource KeyValuePair}" controls:GenericAttached.String="IPDB">
                      <Hyperlink Command="{Binding NavigateToIpdbCommand}" CommandParameter="{Binding SelectedGame.IpdbUrl}">
                        <TextBlock Text="{Binding SelectedGame.IpdbUrl}" Style="{StaticResource ValueTextBlockStyle}" />
                      </Hyperlink>
                    </ContentControl>
                  </StackPanel>
                </GroupBox>

                <ContentControl Content="{Binding SelectedGame.ImageUrlSelection}" ContentTemplate="{StaticResource ImageTemplate}" Margin="5,0" />

                <GroupBox Header="Software: Virtualized Info">
                  <StackPanel>
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding SelectedGame.UpdatedAt}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Features"
                                    controls:GenericAttached.String2="{Binding SelectedGame.Features, Converter={StaticResource ListToStringConverter}}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Designers"
                                    controls:GenericAttached.String2="{Binding SelectedGame.Designers, Converter={StaticResource ListToStringConverter}}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding SelectedGame.LastCreatedAt}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding SelectedGame.UpdatedAt}" />
                    <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Broken" controls:GenericAttached.String2="{Binding SelectedGame.Broken}" />
                  </StackPanel>
                </GroupBox>
              </UniformGrid>

              <GroupBox Margin="0,10,0,0" Header="Files">
                <!-- explicitly defining each tab item separately because TabControl.ItemSource is unusable..
                 1. TabControl.ContentTemplate  - data context is assigned as ItemSource, but DataContext is missing.. can be worked around using markup extensions
                 2. TabControl.ItemContainerStyle - required to be overridden to enable/disable tabs, but MaterialDesignExtensions TabControl doesn't define a keyed style template to use for BasedOn            
                 3. Not dictionary friendly - TabControl.ItemTemplate receives key (good), but TabControl.ItemTemplate receives KeyValuePair instead of just Value (bad).. impossible to bind (easily) in xaml due to generics
                 4. Not much point - simpler to duplicate the xaml than create a separate collection of the x3 types
            -->
                <GroupBox.Resources>
                  <Style x:Key="TabControlStyle" TargetType="TabControl" BasedOn="{StaticResource MaterialDesignTabControl}">
                    <Setter Property="mde:TabControlAssist.TabHeaderFontWeight" Value="Bold" />
                    <Setter Property="mde:TabControlAssist.TabHeaderFontSize" Value="18" />
                  </Style>
                </GroupBox.Resources>

                <TabControl Style="{StaticResource TabControlStyle}">
                  <TabItem Header="Tables" IsEnabled="{Binding SelectedGame.AllFiles[TableFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[TableFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[TableFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />
                  </TabItem>

                  <TabItem Header="Backglasses" IsEnabled="{Binding SelectedGame.AllFiles[B2SFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[B2SFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[B2SFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />
                  </TabItem>

                  <TabItem Header="Wheels" IsEnabled="{Binding SelectedGame.AllFiles[WheelArtFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[WheelArtFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[WheelArtFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />
                  </TabItem>

                  <TabItem Header="ROMs" IsEnabled="{Binding SelectedGame.AllFiles[RomFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[RomFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[RomFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />

                  </TabItem>
                  <TabItem Header="Media Packs" IsEnabled="{Binding SelectedGame.AllFiles[MediaPackFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[MediaPackFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[MediaPackFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />

                  </TabItem>
                  <TabItem Header="DMDs" IsEnabled="{Binding SelectedGame.AllFiles[AltColorFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[AltColorFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[AltColorFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />

                  </TabItem>
                  <TabItem Header="Sounds" IsEnabled="{Binding SelectedGame.AllFiles[SoundFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[SoundFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[SoundFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />
                  </TabItem>

                  <TabItem Header="Toppers" IsEnabled="{Binding SelectedGame.AllFiles[TopperFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[TopperFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[TopperFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />
                  </TabItem>

                  <TabItem Header="PuP Packs" IsEnabled="{Binding SelectedGame.AllFiles[PupPackFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[PupPackFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[PupPackFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />
                  </TabItem>

                  <TabItem Header="POVs" IsEnabled="{Binding SelectedGame.AllFiles[PovFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[PovFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[PovFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />
                  </TabItem>

                  <TabItem Header="Alt. Sounds" IsEnabled="{Binding SelectedGame.AllFiles[AltSoundFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[AltSoundFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[AltSoundFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />
                  </TabItem>

                  <TabItem Header="Rules" IsEnabled="{Binding SelectedGame.AllFiles[RuleFiles].Count}"
                           mde:TabControlAssist.TabHeaderForeground="{Binding SelectedGame.AllFiles[RuleFiles].IsNew, Converter={StaticResource TabItemToColorConverter}}">
                    <ContentControl Content="{Binding SelectedGame.AllFiles[RuleFiles]}" ContentTemplate="{StaticResource FilesTemplate}" />
                  </TabItem>
                </TabControl>
              </GroupBox>
            </StackPanel>
          </Grid>
        </DockPanel>
      </DockPanel>
    </materialDesign:DialogHost>

  </DataTemplate>
</ResourceDictionary>
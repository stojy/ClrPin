<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    mc:Ignorable="d"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:importer="clr-namespace:ClrVpin.Importer"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:controls="clr-namespace:ClrVpin.Controls"
                    xmlns:validationRules="clr-namespace:ClrVpin.Validation_Rules">

  <ResourceDictionary.MergedDictionaries>
    <controls:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\Styles.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\Converters.xaml" />

  </ResourceDictionary.MergedDictionaries>

  <!-- x:Shared resources must be defined at the top level resource dictionary -->
  <controls:Triggers x:Key="TextChangedTriggers" x:Shared="False">
    <b:EventTrigger EventName="TextChanged">
      <b:InvokeCommandAction Command="{Binding ChangedCommand}" d:DataContext="{d:DesignInstance Type=importer:DatabaseItem}" />
    </b:EventTrigger>
  </controls:Triggers>

  <controls:Triggers x:Key="ComboChangedTriggers" x:Shared="False">
    <controls:RoutedEventTrigger RoutedEvent="TextBoxBase.TextChanged">
      <b:InvokeCommandAction Command="{Binding ChangedCommand}" d:DataContext="{d:DesignInstance Type=importer:DatabaseItem}" />
    </controls:RoutedEventTrigger>
  </controls:Triggers>

  <controls:Triggers x:Key="DatePickerChangedTriggers" x:Shared="False">
    <controls:RoutedEventTrigger RoutedEvent="DatePicker.SelectedDateChanged">
      <b:InvokeCommandAction Command="{Binding ChangedCommand}" d:DataContext="{d:DesignInstance Type=importer:DatabaseItem}" />
    </controls:RoutedEventTrigger>
  </controls:Triggers>

  <controls:Triggers x:Key="TimePickerChangedTriggers" x:Shared="False">
    <!--not using event trigger as it doesn't work.. for unknown reasons-->
    <!--<b:EventTrigger EventName="SelectedTime">
      <b:InvokeCommandAction Command="{Binding ChangedCommand}" d:DataContext="{d:DesignInstance Type=database:Game}" />
    </b:EventTrigger>-->

    <b:PropertyChangedTrigger Binding="{Binding DateModified}" d:DataContext="{d:DesignInstance Type=importer:DatabaseItem}">
      <b:InvokeCommandAction Command="{Binding ChangedCommand}" d:DataContext="{d:DesignInstance Type=importer:DatabaseItem}" />
    </b:PropertyChangedTrigger>
  </controls:Triggers>

  <!--table and frontend properties-->
  <DataTemplate x:Key="DatabaseItemDetails" DataType="{x:Type importer:DatabaseItem}">
    <StackPanel>
      <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
          <b:InvokeCommandAction Command="{Binding LoadedCommand}" />
        </b:EventTrigger>
        <b:EventTrigger EventName="Unloaded">
          <b:InvokeCommandAction Command="{Binding UnloadedCommand}" />
        </b:EventTrigger>
      </b:Interaction.Triggers>

      <StackPanel.Resources>
        <Style x:Key="DatabaseEntryTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
          <Setter Property="Margin" Value="0,10" />
          <Setter Property="HorizontalAlignment" Value="Left" />
          <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
          <Setter Property="FontSize" Value="16" />
          <Setter Property="controls:StylableInteraction.Triggers" Value="{StaticResource TextChangedTriggers}" />
          <!--<Setter Property="TextTrimming" Value="CharacterEllipsis" />-->
        </Style>

        <Style x:Key="ComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}">
          <Setter Property="IsDropDownOpen" Value="{Binding Path=IsKeyboardFocusWithin, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
          <Setter Property="materialDesign:HintAssist.HintOpacity" Value=".5" />
          <Setter Property="IsEditable" Value="False" />
          <Setter Property="IsTextSearchEnabled" Value="False" />
          <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
          <Setter Property="HorizontalAlignment" Value="Left" />
          <Setter Property="VerticalAlignment" Value="Center" />
          <Setter Property="FontSize" Value="16" />
          <Setter Property="controls:StylableInteraction.Triggers" Value="{StaticResource ComboChangedTriggers}" />
          <Setter Property="ItemsPanel">
            <Setter.Value>
              <ItemsPanelTemplate>
                <VirtualizingStackPanel />
              </ItemsPanelTemplate>
            </Setter.Value>
          </Setter>
        </Style>

        <Style x:Key="EditComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource ComboBoxStyle}">
          <Setter Property="IsEditable" Value="True" />
        </Style>
      </StackPanel.Resources>

      <TextBlock Style="{DynamicResource MaterialDesignHeadline5TextBlock}" Text="{Binding Title}" Margin="0" HorizontalAlignment="Center" />

      <!--table properties-->
      <GroupBox Header="Table Properties" Margin="0,10,0,0">
        <StackPanel Margin="5,0">
          <TextBox materialDesign:HintAssist.Hint="Name" materialDesign:HintAssist.HelperText="{Binding LocalGame.Derived.TableFileWithExtension}"
                   Style="{StaticResource DatabaseEntryTextBoxStyle}"
                   Width="560" Margin="0,5,0,10">
            <TextBox.Text>
              <Binding Path="LocalGame.Game.Name" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                <Binding.ValidationRules>
                  <validationRules:NotEmptyValidationRule ValidatesOnTargetUpdated="True" ValidationStep="CommittedValue" />
                </Binding.ValidationRules>
              </Binding>
            </TextBox.Text>
          </TextBox>

          <WrapPanel Margin="0,10,0,0">
            <!-- ComboBox.. selectedItem is initialized in the VM, but deliberately not bound to avoid (potential) race condition with the Text binding -->
            <ComboBox ItemsSource="{Binding ManufacturersView}"
                      Text="{Binding Path=LocalGame.Game.Manufacturer, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      materialDesign:HintAssist.Hint="Manufacturer"
                      Width="350">
              <ComboBox.Style>
                <!-- dynamic helper text based on the manufacturer type 
                     - using style trigger instead of a WrapPanel of TextBlocks with visibility trigger.. because HintAssist.HelperText is hardcoded to TextBlock and not a generic control :( -->
                <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource EditComboBoxStyle}">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding LocalGame.Derived.IsOriginal}" Value="true">
                      <Setter Property="materialDesign:HintAssist.HelperText" Value="Original table (not manufactured)" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding LocalGame.Derived.IsOriginal}" Value="false">
                      <Setter Property="materialDesign:HintAssist.HelperText" Value="Manufactured table" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </ComboBox.Style>
            </ComboBox>

            <TextBox Text="{Binding LocalGame.Game.IpdbId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     materialDesign:HintAssist.Hint="IPDB Identifier" materialDesign:HintAssist.HelperText="{Binding LocalGame.Derived.IpdbUrl}"
                     IsEnabled="{Binding LocalGame.Derived.IsOriginal, Converter={StaticResource InvertBooleanConverter}}"
                     Style="{StaticResource DatabaseEntryTextBoxStyle}"
                     Width="200" Margin="10,0,0,0" />
          </WrapPanel>

          <WrapPanel Margin="0,20,0,0">
            <ComboBox ItemsSource="{Binding YearsView}" 
                      Text="{Binding Path=LocalGame.Game.Year, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      materialDesign:HintAssist.Hint="Year"
                      Style="{StaticResource EditComboBoxStyle}"
                      Width="90" />
            <ComboBox ItemsSource="{Binding TypesView}" 
                      Text="{Binding Path=LocalGame.Game.Type, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      materialDesign:HintAssist.Hint="Type" ToolTip="EM: electro-mechanical, SS: solid state, PM: purely mechanical"
                      Style="{StaticResource EditComboBoxStyle}"
                      Width="90" Margin="10,0,0,0" />
            <ComboBox ItemsSource="{Binding PlayersView}" 
                      Text="{Binding Path=LocalGame.Game.Players, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      materialDesign:HintAssist.Hint="Players"
                      Style="{StaticResource EditComboBoxStyle}"
                      Width="90" Margin="10,0,0,0" />
            <ComboBox ItemsSource="{Binding RomsView}" 
                      Text="{Binding Path=LocalGame.Game.Rom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      materialDesign:HintAssist.Hint="ROM" materialDesign:HintAssist.HelperText="e.g. magic.zip"
                      Style="{StaticResource EditComboBoxStyle}"
                      Width="260" Margin="10,0,0,0" />
          </WrapPanel>

          <ComboBox ItemsSource="{Binding ThemesView}" 
                    Text="{Binding Path=LocalGame.Game.Theme, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    materialDesign:HintAssist.Hint="Theme(s)"
                    Style="{StaticResource EditComboBoxStyle}"
                    Width="560" Margin="0,10,0,10" />
        </StackPanel>
      </GroupBox>

      <!--frontend properties-->
      <GroupBox Header="Frontend Properties" Margin="0,15,0,0">
        <StackPanel Margin="5,0">
          <TextBox materialDesign:HintAssist.Hint="Description"
                   Text="{Binding LocalGame.Game.Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                   Style="{StaticResource DatabaseEntryTextBoxStyle}"
                   Width="560" Margin="0,5,0,10" />

          <WrapPanel>
            <TextBox Text="{Binding LocalGame.Game.Version, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     materialDesign:HintAssist.Hint="Version"
                     Style="{StaticResource DatabaseEntryTextBoxStyle}"
                     Width="120" />
            <ComboBox ItemsSource="{Binding AuthorsView}" 
                      Text="{Binding Path=LocalGame.Game.Author, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      materialDesign:HintAssist.Hint="Author(s)"
                      Style="{StaticResource EditComboBoxStyle}"
                      Width="430" Margin="10,10,0,10" />
          </WrapPanel>

          <WrapPanel>
            <Grid>
              <!-- ratings is bound to TextBox so..
                   - easy to distinguish between 0 rating and no rating (aka unrated)
                   - use of clear button to assign no rating (aka null value)
                   - a common trigger for the ChangedCommand.. i.e. avoid need to use interaction triggers for ValueChanged
              -->
              <TextBox Text="{Binding LocalGame.Game.Rating, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                       materialDesign:HintAssist.Hint="Rating" IsReadOnly="True" Opacity="0.5"
                       Style="{StaticResource DatabaseEntryTextBoxStyle}"
                       Width="220" />
              <!--ratings bar is drawn within the TextBox so it appears to be part of the same control-->
              <materialDesign:RatingBar Value="{Binding LocalGame.Game.Rating, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        Min="0" Max="5" ValueIncrements="0.5" IsPreviewValueEnabled="True"
                                        Margin="50,18,0,0">
                <materialDesign:RatingBar.Resources>
                  <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                      <materialDesign:CustomColorTheme BaseTheme="Light" PrimaryColor="Gold" SecondaryColor="Lime" />
                    </ResourceDictionary.MergedDictionaries>
                  </ResourceDictionary>
                </materialDesign:RatingBar.Resources>
                <materialDesign:RatingBar.ValueItemTemplate>
                  <DataTemplate>
                    <materialDesign:PackIcon Kind="Star" Height="30" Width="30" />
                  </DataTemplate>
                </materialDesign:RatingBar.ValueItemTemplate>
              </materialDesign:RatingBar>
            </Grid>

            <TextBox Text="{Binding LocalGame.Game.Comment, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     materialDesign:HintAssist.Hint="Comment(s)"
                     Style="{StaticResource DatabaseEntryTextBoxStyle}"
                     Width="328" Margin="10,10,0,10" />
          </WrapPanel>

          <WrapPanel>
            <WrapPanel.Resources>
              <Style x:Key="DatePickerStyle" TargetType="DatePicker" BasedOn="{StaticResource MaterialDesignFloatingHintDatePicker}">
                <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="False" />
                <Setter Property="Margin" Value="0,10,0,15" />
                <Setter Property="Width" Value="147" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="SelectedDateFormat" Value="Short" />
                <Setter Property="DisplayDateEnd" Value="{Binding MaxDateTime}" />
                <Setter Property="controls:StylableInteraction.Triggers" Value="{StaticResource DatePickerChangedTriggers}" />
              </Style>

              <Style x:Key="TimePickerStyle" TargetType="materialDesign:TimePicker" BasedOn="{StaticResource MaterialDesignFloatingHintTimePicker}">
                <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="False" />
                <Setter Property="Margin" Value="3,10,0,15" />
                <Setter Property="Width" Value="125" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="Is24Hours" Value="True" />
                <Setter Property="WithSeconds" Value="True" />
                <Setter Property="controls:StylableInteraction.Triggers" Value="{StaticResource TimePickerChangedTriggers}" />
              </Style>
            </WrapPanel.Resources>

            <DatePicker SelectedDate="{Binding DateAddedDateOnly}"
                        materialDesign:HintAssist.Hint="Added"
                        materialDesign:HintAssist.HelperText="{Binding DateAdded}"
                        Style="{StaticResource DatePickerStyle}" />
            <materialDesign:TimePicker SelectedTime="{Binding DateAdded}"
                                       materialDesign:HintAssist.Hint=" "
                                       Style="{StaticResource TimePickerStyle}" />

            <DatePicker SelectedDate="{Binding DateModifiedDateOnly}"
                        materialDesign:HintAssist.Hint="Modified"
                        materialDesign:HintAssist.HelperText="{Binding DateModified}"
                        Style="{StaticResource DatePickerStyle}" Margin="10,10,0,15" />
            <materialDesign:TimePicker SelectedTime="{Binding DateModified}"
                                       materialDesign:HintAssist.Hint=" "
                                       Style="{StaticResource TimePickerStyle}" />
          </WrapPanel>
        </StackPanel>
      </GroupBox>

      <TextBlock FontStyle="Italic" Margin="0,10,0,0" 
                 Visibility="{Binding IsExisting, Converter={StaticResource BoolToVisibilityConverter}}"
                 Text="¹ Run the following if 'Title, Manufacturer, Year, or Description' are modified.." />
      <TextBlock FontStyle="Italic" Margin="0,10,0,0" 
                 Visibility="{Binding IsExisting, Converter={StaticResource ReverseBoolToVisibilityConverter}}"
                 Text="¹ Run the following after the missing table is added.."/>
      <TextBlock FontStyle="Italic">
        <Run Text="  1. Scanner - to correct content file names" />
        <LineBreak />
        <Run Text="  2. Importer - to match content against online sources" />
        <LineBreak />
      </TextBlock>

    </StackPanel>
  </DataTemplate>

  <!-- database item (game) 
       - the template is being re-used for subsequent rendering.. presumably(?) due to SharedDictionary which causes this template to only be loaded once
         a. e.g. ComboBox.SelectedItem will persist between 2 different dialogs.. thus important to explicitly assign SelectedItem so the correct one is used
  -->
  <DataTemplate DataType="{x:Type importer:DatabaseItem}">
    <!--explicit border with background and padding required to support usage within a DialogHost that has a transparent background, e.g. importer's image dialog-->
    <Border BorderThickness="0" Padding="10" Background="{DynamicResource MaterialDesignPaper}" Width="600">
      <StackPanel>

        <ContentControl ContentTemplate="{StaticResource DatabaseItemDetails}" Content="{Binding}" />

        <!--buttons-->
        <WrapPanel HorizontalAlignment="Center" Margin="0,10,0,0">
          <WrapPanel.Resources>
            <Style x:Key="DialogButtonStyle" TargetType="Button" BasedOn="{StaticResource FlatButtonStyle}">
              <Setter Property="Margin" Value="0" />
              <Setter Property="Command" Value="{x:Static materialDesign:DialogHost.CloseDialogCommand}" />
            </Style>
            <Style x:Key="DialogButtonAccentStyle" TargetType="Button" BasedOn="{StaticResource FlatAccentButtonStyle}">
              <Setter Property="Margin" Value="0" />
              <Setter Property="Command" Value="{x:Static materialDesign:DialogHost.CloseDialogCommand}" />
            </Style>
          </WrapPanel.Resources>

          <Button Content="Add Missing Info" Width="Auto" Style="{StaticResource DialogButtonStyle}"
                  Visibility="{Binding IsExisting, Converter={StaticResource BoolToVisibilityConverter}}"
                  IsEnabled="{Binding IsItemInfoMissing, Mode=OneWay}"
                  Command="{Binding AddMissingInfoCommand}"
                  ToolTip="Add any missing info for this table to your local database from online sources" />
          <Button Content="Overwrite All Info" Width="Auto" Style="{StaticResource DialogButtonStyle}"
                  Visibility="{Binding IsExisting, Converter={StaticResource BoolToVisibilityConverter}}"
                  IsEnabled="{Binding IsItemInfoDifferent, Mode=OneWay}"
                  Command="{Binding OverwriteAllInfoCommand}"
                  ToolTip="Overwrite all info for this table to your local database from online sources. Information that doesn't exist from online sources will not be overwritten (e.g. ratings)." />

          <Button Content="Update" Width="100" Style="{StaticResource DialogButtonAccentStyle}" CommandParameter="{x:Static importer:DatabaseItemAction.Update}"
                  Visibility="{Binding IsExisting, Converter={StaticResource BoolToVisibilityConverter}}"
                  IsEnabled="{Binding IsItemChanged, Mode=OneWay}"
                  ToolTip="Update changed info for this table to your local database" />
          <Button Content="Delete" Width="100" Style="{StaticResource DialogButtonAccentStyle}" CommandParameter="{x:Static importer:DatabaseItemAction.Delete}"
                  Visibility="{Binding IsExisting, Converter={StaticResource BoolToVisibilityConverter}}"
                  Foreground="{StaticResource AlertBrush}"
                  ToolTip="Delete this table from your local database" />

          <Button Content="Insert" Width="100" Style="{StaticResource DialogButtonAccentStyle}" CommandParameter="{x:Static importer:DatabaseItemAction.Insert}"
                  Visibility="{Binding IsExisting, Converter={StaticResource ReverseBoolToVisibilityConverter}}"
                  ToolTip="Add a new table entry entry to your local database" />

          <Button Content="Cancel" IsCancel="True" Width="100" Style="{StaticResource DialogButtonStyle}" CommandParameter="{x:Static importer:DatabaseItemAction.Cancel}"
                  ToolTip="Exit without updating/inserting an entry in your local database" />
        </WrapPanel>

      </StackPanel>
    </Border>
  </DataTemplate>

</ResourceDictionary>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:controls="clr-namespace:ClrVpin.Controls"
                    xmlns:folder="clr-namespace:ClrVpin.Controls.Folder"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:validationRules="clr-namespace:ClrVpin.Controls.Folder.Validation_Rules"
                    xmlns:converters="clr-namespace:ClrVpin.Converters"
                    mc:Ignorable="d">

  <ResourceDictionary.MergedDictionaries>
    <controls:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\Styles.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="TextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
    <Setter Property="Width" Value="400" />
    <!--<Setter Property="FontSize" Value="15" />-->
    <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
    
    <!-- floating hint (aka field type) made larger to look like a heading once the user has made a text entry -->
    <Setter Property="materialDesign:HintAssist.FloatingScale" Value="1.0" /> 
  </Style>

  <Style x:Key="HelperTextStyle" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignHelperTextBlock}">
    <Setter Property="FontStyle" Value="Italic" />
  </Style>

  <!-- present folder name (with optional folder suffix matching) and open folder button -->
  <DataTemplate x:Key="FolderSelection" DataType="folder:FolderTypeDetail">
    <WrapPanel Height="60">
      <WrapPanel.Resources>
        <!-- create a proxy object with a Data property assigned to the FolderTypeDetail instance that is being data templated -->
        <controls:BindingProxy x:Key="BindingProxy" Data="{Binding}" />
      </WrapPanel.Resources>

      <TextBox Style="{StaticResource TextBoxStyle}"
               materialDesign:HintAssist.Hint="{Binding Description}"
               materialDesign:HintAssist.HelperTextStyle="{StaticResource HelperTextStyle}">
        <TextBox.Text>
          <Binding Path="Folder" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
            <Binding.ValidationRules>
              <!-- run the validation rule after the source is committed, i.e. invalid values are deliberately saved -->
              <validationRules:FileExistsValidationRule ValidatesOnTargetUpdated="True" ValidationStep="CommittedValue">
                <!-- VERY convoluted binding required because..
                      1. Binding requires a dependency property.. but this can't be added to the ValidationRule because it is NOT a dependency object
                      2. Binding a control requires a DataContext.. which isn't available on a new POCO dependency object so it must be bound to a UI BindingProxy (e.g. Freezable element)
                    - refer https://social.technet.microsoft.com/wiki/contents/articles/31422.wpf-passing-a-data-bound-value-to-a-validation-rule.aspx--> 
                <validationRules:FileExistsValidationRule.Args>
                  <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                  <validationRules:FileExistsValidationRuleArgs IsRequired="{Binding Data.IsRequired, Source={StaticResource BindingProxy}}" d:DataContext="{d:DesignInstance Type=folder:FolderTypeDetail}"/>
                </validationRules:FileExistsValidationRule.Args>
              </validationRules:FileExistsValidationRule>

              <validationRules:FilePatternValidationRule ValidatesOnTargetUpdated="True" ValidationStep="CommittedValue">
                <validationRules:FilePatternValidationRule.Args>
                   <!--ReSharper disable once Xaml.BindingWithContextNotResolved--> 
                  <validationRules:FilePatternValidationRuleArgs Pattern="{Binding Data.PatternValidation, Source={StaticResource BindingProxy}}" d:DataContext="{d:DesignInstance Type=folder:FolderTypeDetail}"/>
                </validationRules:FilePatternValidationRule.Args>
              </validationRules:FilePatternValidationRule>

            </Binding.ValidationRules>
          </Binding>
        </TextBox.Text>

        <b:Interaction.Triggers>
          <b:EventTrigger EventName="TextChanged">
            <!-- trigger a command so that we can update the underlying model -->
            <b:InvokeCommandAction Command="{Binding FolderChangedCommandWithParam}" PassEventArgsToCommand="True" />
          </b:EventTrigger>
        </b:Interaction.Triggers>
      </TextBox>

      <Button Command="{Binding FolderExplorerCommand}" Style="{StaticResource MaterialDesignIconButton}" ToolTip="Change folder" Height="30">
        <materialDesign:PackIcon Kind="FolderOpenOutline"/>
      </Button>
    </WrapPanel>
  </DataTemplate>

</ResourceDictionary>
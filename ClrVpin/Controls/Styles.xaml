<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:ClrVpin.Controls"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    mc:Ignorable="d"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:shared="clr-namespace:ClrVpin.Models.Shared">

  <ResourceDictionary.MergedDictionaries>
    <!-- generated brush names (reference as DynamicResource, not StaticResource)
         = https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit/wiki/Getting-Started
         - https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit/wiki/Brush-Name
         - e.g. PrimaryHueDarkBrush, PrimaryHueLightBrush, PrimaryHueMidBrush  = blue shades
                SecondaryHueDarkBrush, SecondaryHueLightBrush, SecondaryHueMidBrush  = green shades
                MaterialDesignPaper = light grey
                MaterialDesignBody = white
    -->

    <materialDesign:BundledTheme BaseTheme="Dark" PrimaryColor="Blue" SecondaryColor="Green" />
    <controls:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
    <controls:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignExtensions;component/Themes/generic.xaml" /> <!-- e.g. TabControlTemplates -->
  </ResourceDictionary.MergedDictionaries>

  <!-- keyed window required by windows created in xaml.. i.e. App.xaml creates MainWindow.xaml -->
  <Style x:Key="MaterialWindowBaseStyle" TargetType="Window">
    <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
    <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}" />
    <Setter Property="FontFamily" Value="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto" />
    <Setter Property="TextElement.FontWeight" Value="Medium" />
    <Setter Property="TextElement.FontSize" Value="14" />
  </Style>

  <Style TargetType="Window" BasedOn="{StaticResource MaterialWindowBaseStyle}" />

  <!-- keyed window required by windows created in xaml.. i.e. App.xaml crates MainWindow.xaml -->
  <Style x:Key="MaterialWindowStyle" TargetType="controls:MaterialWindowEx" BasedOn="{StaticResource MaterialWindowBaseStyle}">
    <Setter Property="BorderBackgroundBrush" Value="{DynamicResource MaterialDesignPaper}" />
  </Style>

  <!--un-keyed style required by windows created in code, e.g. XxxWindow.Show()-->
  <Style TargetType="controls:MaterialWindowEx" BasedOn="{StaticResource MaterialWindowStyle}" />

  <Style x:Key="RaisedDarkButton" TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedDarkButton}">
    <Setter Property="Margin" Value="5,0" />
    <Setter Property="Padding" Value="5" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="4" />
  </Style>

  <Style TargetType="Button" BasedOn="{StaticResource RaisedDarkButton}" />

  <Style x:Key="RaisedAccentButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedAccentButton}">
    <Setter Property="Margin" Value="5,0" />
    <Setter Property="Padding" Value="5" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
    <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="4" />
    <Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
  </Style>

  <Style x:Key="RaisedHighlightButtonStyle" TargetType="Button" BasedOn="{StaticResource RaisedAccentButtonStyle}">
    <Setter Property="Background" Value="Coral" />
    <Setter Property="BorderBrush" Value="Coral" />
  </Style>


  <Style x:Key="FlatAccentButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignFlatAccentButton}">
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Width" Value="70" />
  </Style>

  <Style x:Key="FlatButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignFlatButton}">
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Width" Value="70" />
  </Style>

  <Style x:Key="FlatHighlightButtonStyle" TargetType="Button" BasedOn="{StaticResource FlatButtonStyle}">
    <Setter Property="Foreground" Value="Coral" />
  </Style>

  <Style x:Key="TitleStyle" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignHeadline6TextBlock}">
    <Setter Property="Margin" Value="0,9,0,4" />
  </Style>

  <Style TargetType="Slider" BasedOn="{StaticResource MaterialDesignDiscreteSlider}">
    <Setter Property="Minimum" Value="0" />
    <Setter Property="Maximum" Value="100" />
    <Setter Property="TickFrequency" Value="5" />
    <Setter Property="TickPlacement" Value="BottomRight" />
  </Style>

  <!--with or without this style the appearance doesn't seem to change!-->
  <!--<Style TargetType="CheckBox" BasedOn="{StaticResource MaterialDesignCheckBox}"/>-->
  <Style TargetType="CheckBox" BasedOn="{StaticResource MaterialDesignCheckBox}" />

  <Style x:Key="HighlightableCheckBoxStyle" TargetType="CheckBox" BasedOn="{StaticResource MaterialDesignCheckBox}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsHighlighted}" Value="True" d:DataContext="{d:DesignInstance shared:FeatureType}">
        <Setter Property="Foreground" Value="Coral" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="HighlightableToggleButtonBoxStyle" TargetType="ToggleButton" BasedOn="{StaticResource MaterialDesignSwitchToggleButton}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsHighlighted}" Value="True" d:DataContext="{d:DesignInstance shared:FeatureType}">
        <Setter Property="Foreground" Value="Coral" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="HighlightableRadioButtonStyle" TargetType="RadioButton" BasedOn="{StaticResource MaterialDesignChoiceChipPrimaryOutlineRadioButton}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsHighlighted}" Value="True" d:DataContext="{d:DesignInstance shared:FeatureType}">
        <Setter Property="Foreground" Value="Coral" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="RadioButton" BasedOn="{StaticResource MaterialDesignRadioButton}" />
  <Style TargetType="ToggleButton" BasedOn="{StaticResource MaterialDesignSwitchToggleButton}" />


  <Style x:Key="NoBorderDataGridCellStyle" TargetType="DataGridCell" BasedOn="{StaticResource MaterialDesignDataGridCell}">
    <!-- remove the border outline in the cell when selected, i.e. to give a more 'list box' feel -->
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="FontSize" Value="16" />

    <!-- vertically align content without the 'double grid' lines anomaly by redefining the template.. https://stackoverflow.com/a/3995839/227110 
       - below does work, but the template is incomplete and thus other useful features are lost, e.g. padding
       - alternative is to re-define the TextBlock element style instead!
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Grid Background="{TemplateBinding Background}">
            <ContentPresenter VerticalAlignment="Center" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    -->
  </Style>

  <!-- vertically align content without the 'double grid' lines anomaly by redefining the template.. https://stackoverflow.com/a/8384608/227110
     - works without having to re-define the entire template -->
  <Style x:Key="VerticalAlignDataElementTextStyle" TargetType="TextBlock">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
  </Style>

  <Style TargetType="GroupBox" BasedOn="{StaticResource MaterialDesignGroupBox}">
    <Setter Property="Padding" Value="5,3" />
    <Setter Property="Margin" Value="0" />
    <!--<Setter Property="FontSize" Value="14"/>-->
  </Style>

  <!-- listbox with WrapPanel to draw horizontally (with scrollbar if required) -->
  <Style x:Key="HorizontalListBoxStyle" TargetType="ListBox" BasedOn="{StaticResource MaterialDesignListBox}">
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- listbox with WrapPanel to draw horizontally (with scrollbar if required) -->
  <Style x:Key="RightAlignedHorizontalListBoxStyle" TargetType="ListBox" BasedOn="{StaticResource MaterialDesignListBox}">
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel HorizontalAlignment="Right" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- highlight mouse over item -->
  <Style x:Key="HighlightedListBoxItemOpacityStyle" TargetType="ListBoxItem" BasedOn="{StaticResource MaterialDesignListBoxItem}">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="False">
        <Trigger.Setters>
          <Setter Property="Opacity" Value="0.75" />
        </Trigger.Setters>
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- highlight mouse over item -->
  <Style x:Key="HighlightedListBoxItemEffectStyle" TargetType="ListBoxItem" BasedOn="{StaticResource MaterialDesignListBoxItem}">
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Effect">
            <Setter.Value>
              <DropShadowEffect ShadowDepth="0" Color="White" BlurRadius="15" RenderingBias="Performance" />
            </Setter.Value>
          </Setter>
        </MultiTrigger.Setters>
      </MultiTrigger>
      <!--<Trigger Property="IsMouseOver" Value="True">
        <Trigger.Setters>
          <Setter Property="Effect">
            <Setter.Value>
              <DropShadowEffect ShadowDepth="0" Color="White" BlurRadius="15" RenderingBias="Performance"/>
            </Setter.Value>
          </Setter>
        </Trigger.Setters>
      </Trigger>-->
    </Style.Triggers>
  </Style>

  <!-- generic key-value control and styling -->
  <Style x:Key="KeyTextBlockStyleBase" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignCaptionTextBlock}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Margin" Value="0 0 10 0" />
    <Setter Property="Opacity" Value="0.56" />
    <Setter Property="FontSize" Value="12" />
  </Style>

  <Style x:Key="KeyTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource KeyTextBlockStyleBase}">
    <Setter Property="Width" Value="80" />
  </Style>

  <Style x:Key="KeyTextBlockAutoStyle" TargetType="TextBlock" BasedOn="{StaticResource KeyTextBlockStyleBase}" />

  <Style x:Key="ValueTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignSubtitle1TextBlock}">
    <Setter Property="FontSize" Value="16" />
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="TextWrapping" Value="NoWrap" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
    <Setter Property="FontSize" Value="17"/>
  </Style>

  <!--<Style TargetType="{x:Type ToolTipService}">
    <Setter Property="InitialShowDelay" Value="250"/>
  </Style>-->

</ResourceDictionary>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:controls="clr-namespace:ClrVpin.Controls"
                    xmlns:converters="clr-namespace:ClrVpin.Converters"
                    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:vps="clr-namespace:ClrVpin.Models.Feeder.Vps"
                    xmlns:feederModels="clr-namespace:ClrVpin.Models.Feeder"
                    xmlns:feeder="clr-namespace:ClrVpin.Feeder"
                    xmlns:featureType="clr-namespace:ClrVpin.Shared.FeatureType"
                    xmlns:game="clr-namespace:ClrVpin.Models.Shared.Game">

  <ResourceDictionary.MergedDictionaries>
    <controls:SharedResourceDictionary Source="\Controls\Styles.xaml" />
    <controls:SharedResourceDictionary Source="/Shared/FeatureType/FeatureTypeTemplates.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\ControlTemplates.xaml" />
    <controls:SharedResourceDictionary Source="DatabaseItem.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\Converters.xaml" />
    <controls:SharedResourceDictionary Source="\Controls\Constants.xaml" />
    <controls:SharedResourceDictionary Source="\Shared\Notification.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="UrlButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignFloatingActionDarkButton}">
    <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
  </Style>

  <Style x:Key="IsNewUrlButtonStyle" TargetType="Button" BasedOn="{StaticResource UrlButtonStyle}">
    <Setter Property="Background" Value="{StaticResource AccentLightBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource AccentLightBrush}" />
  </Style>

  <Style x:Key="ButtonIconStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignIconButton}">
    <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="AccentButtonIconStyle" TargetType="Button" BasedOn="{StaticResource ButtonIconStyle}">
    <Setter Property="Foreground" Value="{StaticResource AccentLightBrush}" />
  </Style>

  <Style x:Key="StandardButtonIconStyle" TargetType="Button" BasedOn="{StaticResource ButtonIconStyle}">
    <Setter Property="Foreground" Value="{StaticResource PrimaryMidBrush}" />
  </Style>

  <converters:BoolToStringConverter x:Key="TabItemToColorConverter" True="#FF00C853" False="#89FFFFFF" /> <!--{DynamicResource MaterialDesignBodyLight}-->
  <converters:BoolToStyleConverter x:Key="IsNewUrlButtonStyleConverter" True="{StaticResource IsNewUrlButtonStyle}" False="{StaticResource UrlButtonStyle}" />

  <DataTemplate x:Key="UrlDetailTemplate" DataType="vps:UrlDetail">
    <!--<Button Style="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ContentControl}}, Path=DataContext.IsNew, Converter={StaticResource IsNewUrlButtonStyleConverter}}"-->
    <Button Style="{Binding IsNew, Converter={StaticResource IsNewUrlButtonStyleConverter}}" ToolTip="{Binding Url}" Command="{Binding SelectedCommand}">
      <materialDesign:PackIcon Kind="{Binding Broken, Converter={StaticResource UrlToIconConverter}}" Height="40" Width="40" Foreground="{DynamicResource MaterialDesignBody}" />
    </Button>
  </DataTemplate>

  <!-- urls.. 
       - drawn with negative top margin so they appear in the same visual 'row' as the image
       - fixed listbox height of 72 (icon=40 + various margins added by windows & material) so the card items are drawn the same height whether download URLs exist or not
  -->
  <DataTemplate x:Key="UrlsTemplate">
    <ListBox DockPanel.Dock="Right" ItemsSource="{Binding}" materialDesign:ListBoxItemAssist.ShowSelection="False"
             Style="{StaticResource RightAlignedHorizontalListBoxStyle}"
             ItemTemplate="{StaticResource UrlDetailTemplate}" Margin="0,-40,0,0" Height="72">
      <ListBox.ItemContainerStyle>
        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource HighlightedListBoxItemEffectStyle}" d:DataContext="{d:DesignInstance vps:UrlDetail}">
          <Setter Property="IsEnabled" Value="{Binding Broken, Converter={StaticResource InvertBooleanConverter}}" />
        </Style>
      </ListBox.ItemContainerStyle>
    </ListBox>
  </DataTemplate>

  <!--an insane attempt to use a control template..
      - failed because Command won't fire (for some reason) on the behaviour
      - kept here commented out as a reminder for future me not to try this again!
          <ContentControl Template="{StaticResource ImageTemplate}"
                        controls:GenericAttached.String="{Binding ImgUrl}" controls:GenericAttached.Command="{Binding ImageSelectedCommand}" />
  -->
  <!-- if valid url then show progress and ultimate image, else show broken image
       - written as a control template (vs a DataTemplate with string binding so that it's usable by top level Game and also ImageFile --><!--
  <ControlTemplate x:Key="ImageTemplate" TargetType="ContentControl">
    <Grid Height="300" ToolTip="{TemplateBinding controls:GenericAttached.String}">
      <materialDesign:PackIcon Kind="ImageOffOutline" Width="200" Height="200" HorizontalAlignment="Center" VerticalAlignment="Center"
                               Visibility="{TemplateBinding controls:GenericAttached.String, Converter={StaticResource NullToVisibilityConverter}}" />
      <Grid Visibility="{TemplateBinding controls:GenericAttached.String, Converter={StaticResource ReverseNullToVisibilityConverter}}">

        <ProgressBar Height="50" Width="50" Style="{StaticResource MaterialDesignCircularProgressBar}" Foreground="{DynamicResource MaterialDesignBody}" Value="0" IsIndeterminate="True" />
         --><!-- converter required because template binding doesn't convert to Uri automatically.. second class binding!! 
              - refer https://stackoverflow.com/questions/1935919/wpf-custom-control-templatebinding-to-image--><!-- 
        <Image Source="{TemplateBinding controls:GenericAttached.String, Converter={StaticResource ImageSourceConverter}}" Stretch="UniformToFill" Cursor="Hand">
          <b:Interaction.Triggers>
            <b:EventTrigger EventName="MouseUp">
              <b:InvokeCommandAction Command="{TemplateBinding controls:GenericAttached.Command}" />
            </b:EventTrigger>
          </b:Interaction.Triggers>
        </Image>
      </Grid>
    </Grid>
  </ControlTemplate>-->

  <DataTemplate x:Key="ImageTemplate" DataType="vps:UrlSelection">
    <Grid Height="300">
      <materialDesign:PackIcon Kind="ImageOffOutline" Width="200" Height="200" HorizontalAlignment="Center" VerticalAlignment="Center"
                               Visibility="{Binding Url, Converter={StaticResource NullToVisibilityConverter}}" />
      <Grid Visibility="{Binding Url, Converter={StaticResource ReverseNullToVisibilityConverter}}">

        <ProgressBar Height="50" Width="50" Style="{StaticResource MaterialDesignCircularProgressBar}" Foreground="{DynamicResource MaterialDesignBody}" Value="0" IsIndeterminate="True" />

        <!--converter used to ensure image does not bind to null (which it can't handle).. this seems like a WPF bug though since the parent Grid control is collapsed when Url is null-->
        <Image Source="{Binding Url, Converter={StaticResource NullOrEmptyToUnsetConverter}}" Stretch="UniformToFill" Cursor="Hand">
          <b:Interaction.Triggers>
            <b:EventTrigger EventName="MouseUp">
              <b:InvokeCommandAction Command="{Binding SelectedCommand}" />
            </b:EventTrigger>
          </b:Interaction.Triggers>
        </Image>
      </Grid>
    </Grid>
  </DataTemplate>

  <!--each of the x3 types (TableFile, ImageFile and File) are subtly different enough to warrant separate templates-->
  <DataTemplate DataType="{x:Type vps:TableFile}">
    <materialDesign:Card Margin="0" Width="500" UniformCornerRadius="6" ClipContent="True">
      <StackPanel>
        <!--<Button Command="{Binding ImageSelectedCommand}" Background="Transparent">-->
        <ContentControl Content="{Binding ImageUrlSelection}" ContentTemplate="{StaticResource ImageTemplate}" />
        <ContentControl Content="{Binding Urls}" ContentTemplate="{StaticResource UrlsTemplate}" />

        <StackPanel Margin="5,0,0,0">
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Version" controls:GenericAttached.String2="{Binding Version}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Comment" controls:GenericAttached.String2="{Binding Comment}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Features"
                          controls:GenericAttached.String2="{Binding Features, Converter={StaticResource ListToStringConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding Name}"
                          Visibility="{Binding Name, Converter={StaticResource NullableToVisibilityConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Authors" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Format" controls:GenericAttached.String2="{Binding TableFormat}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Themes"
                          controls:GenericAttached.String2="{Binding Themes, Converter={StaticResource ListToStringConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding CreatedAt}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding UpdatedAt}" />
        </StackPanel>
      </StackPanel>
    </materialDesign:Card>
  </DataTemplate>

  <DataTemplate DataType="{x:Type vps:ImageFile}">
    <materialDesign:Card Margin="0" Width="500" UniformCornerRadius="6" ClipContent="True">
      <StackPanel>
        <ContentControl Content="{Binding ImageUrlSelection}" ContentTemplate="{StaticResource ImageTemplate}" />
        <ContentControl Content="{Binding Urls}" ContentTemplate="{StaticResource UrlsTemplate}" />

        <StackPanel Margin="5,0,0,0">
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Version" controls:GenericAttached.String2="{Binding Version}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Features"
                          controls:GenericAttached.String2="{Binding Features, Converter={StaticResource ListToStringConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding Name}"
                          Visibility="{Binding Name, Converter={StaticResource NullableToVisibilityConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Authors" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding CreatedAt}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding UpdatedAt}" />
        </StackPanel>
      </StackPanel>
    </materialDesign:Card>
  </DataTemplate>

  <DataTemplate DataType="{x:Type vps:File}">
    <materialDesign:Card Margin="0" Width="500" UniformCornerRadius="6" ClipContent="True">
      <StackPanel>
        <Grid Height="300">
          <materialDesign:PackIcon Kind="GhostOutline" Width="200" Height="200" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </Grid>
        <ContentControl Content="{Binding Urls}" ContentTemplate="{StaticResource UrlsTemplate}" />

        <StackPanel Margin="5,0,0,0">
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Version" controls:GenericAttached.String2="{Binding Version}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding Name}"
                          Visibility="{Binding Name, Converter={StaticResource NullableToVisibilityConverter}}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Authors" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created" controls:GenericAttached.String2="{Binding CreatedAt}" />
          <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated" controls:GenericAttached.String2="{Binding UpdatedAt}" />
        </StackPanel>
      </StackPanel>
    </materialDesign:Card>
  </DataTemplate>

  <DataTemplate x:Key="FilesTemplate">
    <controls:HorizontalWheelScrollViewer>
      <!--item template is deliberately not specified so that the correct DataTemplate is automatically selected at run time-->
      <ListBox ItemsSource="{Binding}" materialDesign:ListBoxItemAssist.ShowSelection="False" VerticalContentAlignment="Top"
               ItemContainerStyle="{StaticResource HighlightedListBoxItemOpacityStyle}" Style="{StaticResource HorizontalListBoxStyle}" />
    </controls:HorizontalWheelScrollViewer>
  </DataTemplate>

  <Style x:Key="ComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}">
    <Setter Property="IsDropDownOpen" Value="{Binding Path=IsKeyboardFocusWithin, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
    <Setter Property="materialDesign:HintAssist.HintOpacity" Value=".5" />
    <Setter Property="IsEditable" Value="False" />
    <Setter Property="IsTextSearchEnabled" Value="False" />
    <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="EditComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource ComboBoxStyle}">
    <Setter Property="IsEditable" Value="True" />
  </Style>

  <DataTemplate x:Key="FeederResultsTemplate" DataType="{x:Type feeder:FeederResultsViewModel}">
    <materialDesign:DialogHost Identifier="FeederResultsDialog" CloseOnClickAway="True" VerticalAlignment="Stretch" DialogMargin="0" DialogBackground="Transparent">
      <!--example of different dialogs from the same host.. https://github.com/Keboo/MaterialDesignInXaml.Examples/blob/master/DialogHost/DialogHost.FromViewModel/MainWindow.xaml-->
      <materialDesign:DialogHost.DialogContentTemplate>
        <DataTemplate>
          <DataTemplate.Resources>

            <!--image dialog-->
            <DataTemplate DataType="{x:Type vps:UrlSelection}">
              <StackPanel>
                <b:Interaction.Triggers>
                  <b:EventTrigger EventName="MouseUp">
                    <b:InvokeCommandAction Command="{Binding SelectedCommand}" />
                  </b:EventTrigger>
                </b:Interaction.Triggers>
               
                <Grid Name="container">
                  <Image Margin="20" Source="{Binding Url, Converter={StaticResource NullOrEmptyToUnsetConverter}}" Stretch="Uniform" Height="1100" />

                  <!-- apply opacity mask to the grid for the rounded edges
                       - would prefer to apply CornerRadius directly to the Image, but unfortunately it's not supported.. so instead house Image within Grid and apply an opacity mask
                       - border is dynamically sized to the grid (which is dynamically sized by the child Image content) to support Image stretch which results in a dynamic width (with fixed height
                       - Image must be defined before the opacity mask definition.. presumably to ensure the grid size has been calculated prior to binding
                       - the Border for the opacity mask can be anything, so long as it's defined
                       - fortunately, the effect is applied AFTER the opacity mask.. hence the 'glow' (correctly) surrounds the image and not the outer grid
                         - but does require the Image to contain a margin to house the effect
                       - refer https://stackoverflow.com/a/70214574/227110
                  -->
                  <Grid.OpacityMask>
                    <VisualBrush>
                      <VisualBrush.Visual>
                        <Border Height="{Binding ElementName=container, Path=ActualHeight}"
                                Width="{Binding ElementName=container, Path=ActualWidth}"
                                Background="Yellow" CornerRadius="20" />
                      </VisualBrush.Visual>
                    </VisualBrush>
                  </Grid.OpacityMask>
                  <Grid.Effect>
                    <DropShadowEffect ShadowDepth="0" Color="White" BlurRadius="20" RenderingBias="Performance" />
                  </Grid.Effect>
                </Grid>

                <!--non-visible button marked with IsCancel to support the escape key-->
                <Button Content="Cancel" Style="{StaticResource HiddenButtonStyle}" IsCancel="True" Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}" />
              </StackPanel>
            </DataTemplate>

            <!-- notification and database item (game) templates are imported at global file scope - refer (top of file) -->
          </DataTemplate.Resources>

          <!--render the appropriate template-->
          <ContentControl Content="{Binding}" />
        </DataTemplate>
      </materialDesign:DialogHost.DialogContentTemplate>


      <!-- dock panel to provide a scrollbar (if required) for the child controls -->
      <DockPanel Margin="5" VerticalAlignment="Stretch">
        <DockPanel DockPanel.Dock="Left" Width="700">
          <GroupBox DockPanel.Dock="Top" Header="Include Filters" Margin="0,0,0,10">
            <StackPanel Margin="5">
              <WrapPanel Margin="0,-5,0,0"> <!-- margin kludge required here because the combo boxes have an excessive margin to cater for the helper text :( -->
                <ComboBox ItemsSource="{Binding GameFiltersViewModel.TablesFilterView}"
                          Text="{Binding Path=Settings.SelectedTableFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Table"
                          Style="{StaticResource EditComboBoxStyle}"
                          Width="265" Margin="0,0,10,0"
                          ToolTip="Filter the tables based on the table name.">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="TextBoxBase.TextChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChangedCommand}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <ComboBox ItemsSource="{Binding GameFiltersViewModel.ManufacturersFilterView}"
                          Text="{Binding Path=Settings.SelectedManufacturerFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          materialDesign:HintAssist.Hint="Manufacturer"
                          Style="{StaticResource EditComboBoxStyle}"
                          Width="230" Margin="0"
                          ToolTip="Filter the tables based on the manufacturer.">
                  <b:Interaction.Triggers>
                    <controls:RoutedEventTrigger RoutedEvent="TextBoxBase.TextChanged">
                      <b:InvokeCommandAction Command="{Binding FilterChangedCommand}" />
                    </controls:RoutedEventTrigger>
                  </b:Interaction.Triggers>
                </ComboBox>

                <WrapPanel Margin="20,10,0,0" VerticalAlignment="Center"
                           ToolTip="When enabled, the drop down filtering options are dynamically updated to only include values from the filtered list of displayed tables.">
                  <ToggleButton IsChecked="{Binding Settings.IsDynamicFiltering}" Command="{Binding DynamicFilteringCommand}" />
                  <TextBlock Margin="5,0,0,0" Text="Dynamic Filtering" />
                </WrapPanel>
              </WrapPanel>

              <Grid Margin="0,10,0,0">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="1.20*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <WrapPanel>
                  <ComboBox ItemsSource="{Binding GameFiltersViewModel.TypesFilterView}"
                            SelectedItem="{Binding Path=Settings.SelectedTypeFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            materialDesign:HintAssist.Hint="Type"
                            Style="{StaticResource ComboBoxStyle}"
                            Width="65" Margin="0,0,0,0" 
                            ToolTip="Filter the tables based on the table construction type: PM (Purely Mechanical), EM (Electromechanical), SS (Solid State).">
                    <b:Interaction.Triggers>
                      <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                        <b:InvokeCommandAction Command="{Binding FilterChangedCommand}" />
                      </controls:RoutedEventTrigger>
                    </b:Interaction.Triggers>
                  </ComboBox>

                  <ComboBox ItemsSource="{Binding GameFiltersViewModel.FormatsFilterView}"
                            SelectedItem="{Binding Path=Settings.SelectedFormatFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            materialDesign:HintAssist.Hint="Format"
                            Style="{StaticResource ComboBoxStyle}"
                            Width="80" Margin="10,0,0,0"
                            ToolTip="Filter the tables based on the emulator. Ignored for unmatched tables.">
                    <b:Interaction.Triggers>
                      <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                        <b:InvokeCommandAction Command="{Binding FilterChangedCommand}" />
                      </controls:RoutedEventTrigger>
                    </b:Interaction.Triggers>
                  </ComboBox>

                  <ComboBox ItemsSource="{Binding GameFiltersViewModel.YearsBeginFilterView}"
                            SelectedItem="{Binding Path=Settings.SelectedYearBeginFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            materialDesign:HintAssist.Hint="Year From"
                            Style="{StaticResource ComboBoxStyle}"
                            Width="100" Margin="10,0,0,0"
                            ToolTip="Filter the tables based on the earliest manufacture year.">
                    <b:Interaction.Triggers>
                      <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                        <b:InvokeCommandAction Command="{Binding FilterChangedCommand}" />
                      </controls:RoutedEventTrigger>
                    </b:Interaction.Triggers>
                  </ComboBox>

                  <ComboBox ItemsSource="{Binding GameFiltersViewModel.YearsEndFilterView}"
                            SelectedItem="{Binding Path=Settings.SelectedYearEndFilter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            materialDesign:HintAssist.Hint="Year To"
                            Style="{StaticResource ComboBoxStyle}"
                            Width="80" Margin="10,0,0,0"
                            ToolTip="Filter the tables based on the latest manufacture year.">
                    <b:Interaction.Triggers>
                      <controls:RoutedEventTrigger RoutedEvent="ComboBox.SelectionChanged">
                        <b:InvokeCommandAction Command="{Binding FilterChangedCommand}" />
                      </controls:RoutedEventTrigger>
                    </b:Interaction.Triggers>
                  </ComboBox>
                </WrapPanel>

                <Separator Grid.Column="1" Style="{StaticResource SeparatorStyle}" Margin="2,5,12,0" />

                <WrapPanel Grid.Column="2">
                  <WrapPanel.Resources>
                    <Style x:Key="DatePickerStyle" TargetType="DatePicker" BasedOn="{StaticResource MaterialDesignFloatingHintDatePicker}">
                      <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True" />
                      <Setter Property="Margin" Value="10,0,0,0" />
                      <!--<Setter Property="Padding" Value="0,2" />-->
                      <Setter Property="Width" Value="130" />
                    </Style>
                  </WrapPanel.Resources>

                  <DatePicker materialDesign:HintAssist.Hint="Updated From" 
                              Style="{StaticResource DatePickerStyle}" 
                              SelectedDate="{Binding Settings.SelectedUpdatedAtDateBegin}"
                              DisplayDateEnd="{Binding Settings.SelectedUpdatedAtDateEnd}" 
                              Margin="0"
                              ToolTip="Filter the tables based on when the table was last updated. Ignored for unmatched tables.">
                    <b:Interaction.Triggers>
                      <controls:RoutedEventTrigger RoutedEvent="DatePicker.SelectedDateChanged">
                        <b:InvokeCommandAction Command="{Binding UpdatedFilterTimeChanged}" />
                      </controls:RoutedEventTrigger>
                    </b:Interaction.Triggers>
                  </DatePicker>

                  <DatePicker materialDesign:HintAssist.Hint="Updated To" 
                              Style="{StaticResource DatePickerStyle}" 
                              SelectedDate="{Binding Settings.SelectedUpdatedAtDateEnd}"
                              DisplayDateStart="{Binding Settings.SelectedUpdatedAtDateBegin}"
                              ToolTip="Filter the tables based on when the table was last updated. Ignored for unmatched tables.">
                    <b:Interaction.Triggers>
                      <controls:RoutedEventTrigger RoutedEvent="DatePicker.SelectedDateChanged">
                        <b:InvokeCommandAction Command="{Binding UpdatedFilterTimeChanged}" />
                      </controls:RoutedEventTrigger>
                    </b:Interaction.Triggers>
                  </DatePicker>

                  <materialDesign:PopupBox Style="{StaticResource MaterialDesignPopupBox}"
                                           PlacementMode="BottomAndAlignCentres"
                                           PopupMode="Click"
                                           PopupUniformCornerRadius="5"
                                           Width="30"
                                           ToolTip="Filter the tables based on when the table was last updated via the preset dates. Ignored for unmatched tables.">
                    <ItemsControl ItemsSource="{Binding GameFiltersViewModel.PresetDateOptionsView}">
                      <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                          <StackPanel />
                        </ItemsPanelTemplate>
                      </ItemsControl.ItemsPanel>
                      <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="featureType:FeatureType">
                          <Button Content="{Binding Description}" Command="{Binding SelectedCommand}" />
                        </DataTemplate>
                      </ItemsControl.ItemTemplate>
                    </ItemsControl>
                  </materialDesign:PopupBox>
                </WrapPanel>
              </Grid>

              <Grid Margin="0,10,0,0">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="1.20*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ContentControl Template="{StaticResource KeyValueAutoPair}" 
                                controls:GenericAttached.String="Fuzzy"
                                controls:GenericAttached.String2="Filter the tables based on whether the fuzzy matching was successful."
                                controls:GenericAttached.Double="60" controls:GenericAttached.Double2="14">
                  <ContentControl ContentTemplate="{StaticResource FeatureTypeListChoiceChipTemplate}" Content="{Binding GameFiltersViewModel.TableMatchOptionsView}" />
                </ContentControl>

                <Separator Grid.Column="1" Style="{StaticResource SeparatorStyle}" />

                <ContentControl Grid.Column="2" Template="{StaticResource KeyValueAutoPair}" 
                                controls:GenericAttached.String="Style" 
                                controls:GenericAttached.String2="Filter the tables based on whether the table was physically manufactured."
                                controls:GenericAttached.Double="60"
                                controls:GenericAttached.Double2="14">
                  <ContentControl ContentTemplate="{StaticResource FeatureTypeListChoiceChipTemplate}" Content="{Binding GameFiltersViewModel.TableStyleOptionsView}" />
                </ContentControl>
              </Grid>

              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="1.20*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ContentControl Template="{StaticResource KeyValueAutoPair}" 
                                controls:GenericAttached.String="Updated" 
                                controls:GenericAttached.String2="Filter the tables based on the type of content that was updated. Not applicable for unmatched tables."
                                controls:GenericAttached.Double="60" 
                                controls:GenericAttached.Double2="14">
                  <ContentControl ContentTemplate="{StaticResource FeatureTypeListChoiceChipTemplate}" Content="{Binding GameFiltersViewModel.TableNewContentOptionsView}" />
                </ContentControl>

                <Separator Grid.Column="1" Style="{StaticResource SeparatorStyle}" />

                <ContentControl Grid.Column="2" Template="{StaticResource KeyValueAutoPair}" 
                                controls:GenericAttached.String="Table" 
                                controls:GenericAttached.String2="Filter the tables based on whether the table can be downloaded. Not applicable for unmatched tables."
                                controls:GenericAttached.Double="60"
                                controls:GenericAttached.Double2="14">
                  <ContentControl ContentTemplate="{StaticResource FeatureTypeListChoiceChipTemplate}" Content="{Binding GameFiltersViewModel.TableAvailabilityOptionsView}" />
                </ContentControl>
              </Grid>
            </StackPanel>
          </GroupBox>

          <GroupBox DockPanel.Dock="Top" Header="Exclude Filters" Margin="0,0,0,10">
            <StackPanel Margin="5">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="1.20*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ContentControl Template="{StaticResource KeyValueAutoPair}" 
                                controls:GenericAttached.String="Features" 
                                controls:GenericAttached.String2="Don't attribute file(s) as 'New' if they contain these features"
                                controls:GenericAttached.Double="60" 
                                controls:GenericAttached.Double2="14">
                  <ContentControl ContentTemplate="{StaticResource FeatureTypeListFilterChipTemplate}" Content="{Binding GameFiltersViewModel.IgnoreFeaturesOptionsView }" />
                </ContentControl>

                <!--<Separator Grid.Column="1" Style="{StaticResource SeparatorStyle}" />-->
              </Grid>
            </StackPanel>
          </GroupBox>

          <GroupBox DockPanel.Dock="Top" Header="Fix" Margin="0,0,0,10">
            <StackPanel Margin="5,0">
              <WrapPanel Margin="0,5,0,0">
                <ContentControl Template="{StaticResource KeyValuePair}"
                                controls:GenericAttached.String="Existing Tables"
                                controls:GenericAttached.String2="tba"
                                controls:GenericAttached.Double="100"
                                controls:GenericAttached.Double2="14">
                  <WrapPanel>
                    <Button ToolTip="{Binding AddMissingDatabaseInfoTip}"
                            ToolTipService.ShowOnDisabled="True"
                            Style="{StaticResource RaisedAccentButtonStyle}"
                            Margin="0,0,5,0"
                            Width="150" Height="30"
                            IsEnabled="{Binding IsMatchingEnabled}"
                            Command="{Binding AllTableAddMissingDatabaseInfoCommand}">
                      Add Missing Info
                    </Button>
                    <Button ToolTip="{Binding OverwriteDatabaseInfoTip}"
                            ToolTipService.ShowOnDisabled="True"
                            Style="{StaticResource RaisedAccentButtonStyle}"
                            Width="150" Height="30"
                            Margin="10,0,0,0"
                            IsEnabled="{Binding IsMatchingEnabled}"
                            Command="{Binding AllTableOverwriteDatabaseInfoCommand}">
                      Overwrite All Info
                    </Button>
                  </WrapPanel>
                </ContentControl>
              </WrapPanel>

              <ContentControl Template="{StaticResource KeyValuePair}"
                              controls:GenericAttached.String="Backup Folder"
                              controls:GenericAttached.Double="100"
                              controls:GenericAttached.Double2="14">
                <Hyperlink NavigateUri="{Binding BackupFolder}" Command="{Binding NavigateToBackupFolderCommand}" FontSize="16">
                  <TextBlock Text="{Binding BackupFolder}" />
                </Hyperlink>
              </ContentControl>
            </StackPanel>
          </GroupBox>

          <WrapPanel DockPanel.Dock="Top" HorizontalAlignment="Right" TextBlock.FontStyle="Italic" Opacity="0.6">
            <TextBlock Text="{Binding GameItemsView.Count}" />
            <TextBlock Text=" / " />
            <TextBlock Text="{Binding GameItems.Count}" />
          </WrapPanel>

          <DataGrid Name="FeederResults" DockPanel.Dock="Bottom" 
                    SelectionMode="Single"
                    ItemsSource="{Binding GameItemsView}"
                    AutoGenerateColumns="False" 
                    CanUserAddRows="False" 
                    CanUserDeleteRows="False"
                    materialDesign:DataGridAssist.ColumnHeaderPadding="4 1 1 4"
                    materialDesign:DataGridAssist.CellPadding="4 1 1 4"
                    CellStyle="{StaticResource NoBorderDataGridCellStyle}"
                    ColumnHeaderStyle="{StaticResource DataGridColumnHeaderStyle}" 
                    CanUserSortColumns="True"
                    IsReadOnly="True"
                    EnableRowVirtualization="True"
                    GridLinesVisibility="None"
                    SelectedItem="{Binding SelectedGameItem}">

            <b:Interaction.Triggers>
              <b:EventTrigger EventName="SelectionChanged">
                <b:InvokeCommandAction Command="{Binding GameItemSelectedCommand}" />
              </b:EventTrigger>
            </b:Interaction.Triggers>

            <DataGrid.Columns>
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=game:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}"
                                  Header="#" Binding="{Binding Index}" Width="45" />

              <DataGridTemplateColumn d:DataContext="{d:DesignInstance Type=game:GameItem}" CanUserSort="False" CanUserResize="False" CanUserReorder="False" 
                                      Width="30" CellStyle="{StaticResource AlignedDataGridCellStyle}">
                <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                    <WrapPanel>
                      <Button Style="{StaticResource ButtonIconStyle}" Height="30" Width="30"
                              ToolTip="{Binding UpdateDatabaseMatchedEntryTooltip}"
                              Visibility="{Binding TableMatchType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static feederModels:TableMatchOptionEnum.LocalAndOnline}}"
                              IsEnabled="{Binding IsMatchingEnabled}"
                              Command="{Binding UpdateDatabaseEntryCommand}">
                        <materialDesign:PackIcon Kind="Pencil" />
                      </Button>
                      <Button Style="{StaticResource AccentButtonIconStyle}" Height="30" Width="30"
                              ToolTip="{Binding UpdateDatabaseUnmatchedEntryTooltip}"
                              Visibility="{Binding TableMatchType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static feederModels:TableMatchOptionEnum.LocalOnly}}"
                              IsEnabled="{Binding IsMatchingEnabled}"
                              Command="{Binding UpdateDatabaseEntryCommand}">
                        <materialDesign:PackIcon Kind="Pencil" />
                      </Button>
                      <Button Style="{StaticResource AccentButtonIconStyle}" Height="30" Width="30"
                              ToolTip="{Binding CreateDatabaseEntryTooltip}"
                              Visibility="{Binding TableMatchType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static feederModels:TableMatchOptionEnum.OnlineOnly}}"
                              IsEnabled="{Binding IsMatchingEnabled}"
                              Command="{Binding CreateDatabaseEntryCommand}">
                        <materialDesign:PackIcon Kind="Plus" Height="33" Width="33" Margin="-2,0,0,0"/> <!-- drawn oversize because the 'plus' icon is too small -->
                      </Button>
                    </WrapPanel>
                  </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
              </DataGridTemplateColumn>

              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=game:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}" Header="Table"
                                  Binding="{Binding Name}"
                                  Width="255" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=game:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}" Header="Manufacturer"
                                  Binding="{Binding Manufacturer}" Width="160" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=game:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}" Header="Year"
                                  Binding="{Binding Year}"
                                  Width="55" />
              <DataGridTextColumn d:DataContext="{d:DesignInstance Type=game:GameItem}" ElementStyle="{StaticResource VerticalAlignDataElementTextStyle}" Header="Updated"
                                  Binding="{Binding UpdatedAt, StringFormat={}{0:dd/MM/yy hh:mm}}" />
            </DataGrid.Columns>
          </DataGrid>
        </DockPanel>

        <DockPanel DockPanel.Dock="Right" Margin="10,0,0,0">
          <Grid>
            <StackPanel Visibility="{Binding ElementName=FeederResults, Path=SelectedIndex, Converter={StaticResource NegativeToVisibilityConverter}}"
                        VerticalAlignment="Center" HorizontalAlignment="Center">
              <materialDesign:PackIcon Kind="HelpCircleOutline" Width="400" Height="400" HorizontalAlignment="Center" />
              <TextBlock Text="Select a table to view the online information" FontSize="28" />
            </StackPanel>

            <StackPanel Visibility="{Binding SelectedGameItem.OnlineGame, Converter={StaticResource NullToVisibilityConverter}}"
                        VerticalAlignment="Center" HorizontalAlignment="Center">
              <StackPanel Visibility="{Binding ElementName=FeederResults, Path=SelectedIndex, Converter={StaticResource PositiveToVisibilityConverter}}"
                          VerticalAlignment="Center" HorizontalAlignment="Center">
                <materialDesign:PackIcon Kind="AlertCircleOutline" Width="400" Height="400" HorizontalAlignment="Center" />
                <TextBlock Text="Online information is not available for unmatched tables" FontSize="28" />
              </StackPanel>
            </StackPanel>

            <StackPanel Visibility="{Binding ElementName=FeederResults, Path=SelectedIndex, Converter={StaticResource PositiveToVisibilityConverter}}">
              <StackPanel Visibility="{Binding SelectedGameItem.OnlineGame, Converter={StaticResource ReverseNullToVisibilityConverter}}">
                <UniformGrid Columns="3">
                  <GroupBox Header="Hardware: Table Info">
                    <StackPanel Margin="5,0">
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Name" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Name}" />
                      <UniformGrid Columns="2">
                        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Manufacturer"
                                        controls:GenericAttached.String2="{Binding SelectedOnlineGame.Manufacturer}" />
                        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Year" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Year}" />
                      </UniformGrid>
                      <UniformGrid Columns="2">
                        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Type" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Type}" />
                        <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Players"
                                        controls:GenericAttached.String2="{Binding SelectedOnlineGame.Players}" />
                      </UniformGrid>
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="MPU" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Mpu}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Themes"
                                      controls:GenericAttached.String2="{Binding SelectedOnlineGame.Themes, Converter={StaticResource ListToStringConverter}}" />
                      <ContentControl Template="{StaticResource KeyValuePair}" controls:GenericAttached.String="IPDB">
                        <Hyperlink Command="{Binding NavigateToUrlCommand}" CommandParameter="{Binding SelectedOnlineGame.IpdbUrl}">
                          <TextBlock Text="{Binding SelectedOnlineGame.IpdbUrl}" Style="{StaticResource ValueTextBlockStyle}" />
                        </Hyperlink>
                      </ContentControl>
                    </StackPanel>
                  </GroupBox>

                  <ContentControl Content="{Binding SelectedOnlineGame.ImageUrlSelection}" ContentTemplate="{StaticResource ImageTemplate}" Margin="5,0" />

                  <GroupBox Header="Software: Virtualized Info">
                    <StackPanel Margin="5,0">
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated"
                                      controls:GenericAttached.String2="{Binding SelectedOnlineGame.UpdatedAt}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Features"
                                      controls:GenericAttached.String2="{Binding SelectedOnlineGame.Features, Converter={StaticResource ListToStringConverter}}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Designers"
                                      controls:GenericAttached.String2="{Binding SelectedOnlineGame.Designers, Converter={StaticResource ListToStringConverter}}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Created"
                                      controls:GenericAttached.String2="{Binding SelectedOnlineGame.LastCreatedAt}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Updated"
                                      controls:GenericAttached.String2="{Binding SelectedOnlineGame.UpdatedAt}" />
                      <ContentControl Template="{StaticResource KeyValueStringPair}" controls:GenericAttached.String="Broken" controls:GenericAttached.String2="{Binding SelectedOnlineGame.Broken}" />
                      <ContentControl Template="{StaticResource KeyValuePair}" controls:GenericAttached.String="VPS">
                        <Hyperlink Command="{Binding NavigateToUrlCommand}" CommandParameter="{Binding SelectedOnlineGame.VpsUrl}">
                          <TextBlock Text="{Binding SelectedOnlineGame.VpsUrl}" Style="{StaticResource ValueTextBlockStyle}" />
                        </Hyperlink>
                      </ContentControl>
                    </StackPanel>
                  </GroupBox>
                </UniformGrid>

                <GroupBox Margin="0,10,0,0" Header="Files">
                  <GroupBox.Resources>
                    <Style x:Key="TabControlStyle" TargetType="TabControl" BasedOn="{StaticResource MaterialDesignTabControl}" />
                  </GroupBox.Resources>

                  <TabControl Style="{StaticResource TabControlStyle}" ItemsSource="{Binding SelectedOnlineGame.AllFilesList}" SelectedItem="{Binding SelectedFileCollection}">
                    <TabControl.ItemTemplate>
                      <!--tab item header content-->
                      <DataTemplate DataType="{x:Type vps:FileCollection}">
                        <WrapPanel>
                          <TextBlock FontSize="18" FontWeight="Bold" VerticalAlignment="Center" Text="{Binding Title}"
                                     Foreground="{Binding IsNew, Converter={StaticResource TabItemToColorConverter}}" />
                          <materialDesign:PackIcon Kind="NewBox" Height="32" Width="32" Margin="1,-16,0,0" Foreground="{StaticResource AccentLightBrush}"
                                                   Visibility="{Binding IsNew, Converter={StaticResource ReverseBoolToHiddenConverter}}" />
                        </WrapPanel>
                      </DataTemplate>
                    </TabControl.ItemTemplate>

                    <TabControl.ContentTemplate>
                      <DataTemplate>
                        <!-- selected tab item contents (underneath) -->
                        <ContentControl Content="{Binding}" ContentTemplate="{StaticResource FilesTemplate}" />
                      </DataTemplate>
                    </TabControl.ContentTemplate>

                    <TabControl.ItemContainerStyle>
                      <!-- tab item header style, e.g. padding, disabled, etc -->
                      <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource MaterialDesignTabItem}" d:DataContext="{d:DesignInstance vps:FileCollection}">
                        <Setter Property="IsEnabled" Value="{Binding Count}" />
                        <Setter Property="Padding" Value="6,12" />
                      </Style>
                    </TabControl.ItemContainerStyle>
                  </TabControl>
                </GroupBox>
              </StackPanel>
            </StackPanel>
          </Grid>
        </DockPanel>
      </DockPanel>
    </materialDesign:DialogHost>
  </DataTemplate>
</ResourceDictionary>